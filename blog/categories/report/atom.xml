<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: report | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/categories/report/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T13:40:29+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[Hisashi HATAKEYAMA]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[&#8220;Server Manage Deep Talk #1&#8243; の振り返りメモ]]></title>
    <link href="http://blog.hatak.net/2012/10/12/17536"/>
    <updated>2012-10-12T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/10/12/server-manage-deep-talk</id>
    <content type="html"><![CDATA[<p>先日、&#8221;<a href="https://www.facebook.com/events/346462502114960/">Server Manage Deep Talk #1</a>&#8221; に参加してきました。</p>

<p>YAPC の懇親会での話がきっかけで @riywo さんに企画していただいたイベントでした。趣旨としては、既成のツールに焦点を絞るのではなく、サーバを効率的（かつ、可能であれば統一的）に管理するにはどうすればいいかというざっくりとした情報交換の場だったのですが、各社の苦悩が感じられてとても面白いものでした。</p>

<p>そのあと、ちょっと自分なりに考えてみたので覚え書きしてみます。</p>

<!--more-->

<p>今回の話を踏まえると、最初に考えなければならないのは大きく2つの点だと思います。 （解釈間違えなどあればご指摘ください。。）</p>

<h3 id="toc_3">「管理」の対象がどこまでなのか</h3>

<p>サーバ管理といっても様々な管理があります。</p>

<ul>
<li>物理と論理

<ul>
<li>物理 : どのデータセンタ/ラック/スロットにあるか</li>
<li>論理 : どのセグメントでどのように利用されているか</li>
</ul></li>
<li>資産と運用

<ul>
<li>資産 : 固定資産の減価償却やリース期間 (業務監査のイメージ)</li>
<li>運用 : どのサービスにどういった用途で利用しているか</li>
</ul></li>
</ul>

<p>このほかにも、オンプレミス/クラウド(VM含)やスペック毎/役割毎など、いろんな分類基準があるわけです。全てをカバーするのも一つの選択肢ですが、ここは目的から軸となる区分を明確化しておく必要がありそうです。 @kentaro さんがおっしゃられていたように、まさに利用シーンの現状や想定を整理した上で、実際どのあたりを吸収するか考える必要があるのだろうと思います。</p>

<h3 id="toc_4">データを集約するか、proxy するか</h3>

<p>@riywo さんのアイディアでは、既存ツールのデータを活かすために Core が欲しいデータを持っている各ツールに問い合わせて返ってきた情報を集約する形になっています。 一方で、@kuwa_tw さんからの意見で全部まとめた箱としてしまうというアイディアもあり、これもありだと思います。</p>

<p>それぞれのメリットを考えてみます。</p>

<ul>
<li>集約式

<ul>
<li>データが一カ所にまとめられる</li>
<li>他サービスへの依存が無い</li>
<li>ここだけ変更すればいい</li>
</ul></li>
<li>proxy式

<ul>
<li>既存ツールはそのままにできる</li>
<li>Core の機能はシンプルに抑えられる</li>
</ul></li>
</ul>

<p>これは現状の利用状況に依るのかも知れないですね。ツールがどの程度(種類・頻度)利用されていて移行のコストがどれくらいかかるのか、あるいは部署を横断的にまとめていくことが社内政治的に可能なのかどうか、そもそも現状のデータをどれくらい Core が吸収できるのか、といったあたりが焦点になる気がします。</p>

<p>私自身の利用経験や環境から考えると、集約してしまう方式が敷居は低そうかなと感じました。連携のために既存ツールに手を入れなければならないのは導入コストとして高くつくかなと。（でも、結局はバランスを見てのハイブリッドになりそう。。）</p>

<p>自分なりにちょっとずつ整理しながら、ひとまずはシンプルなモックを作ってみようかなと思っています。</p>

<p>次回、が行えるようであればさらに掘り下げて、少しでもインフラ担当者が楽になれると幸せですね。 あと、Web サービス事業者だけに限らず、ホスティングなどでまとまった台数を管理していそうな DC 事業者さんとかの話も伺ってみたいと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2012 で話してきた]]></title>
    <link href="http://blog.hatak.net/2012/09/29/17281"/>
    <updated>2012-09-29T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/09/29/yapcasia-tokyo-2012</id>
    <content type="html"><![CDATA[<p>9/27-29 の日程で東京大学で <a href="http://yapcasia.org/2012/" title="YAPC::Asia 2012">YAPC::Asia Tokyo 2012</a> が開催されています。 応募したトークを採用していただいたので、スピーカーとして参加させていただきました。</p>

<p><a href="http://www.slideshare.net/idhatak/ss-14499185">http://www.slideshare.net/idhatak/ss-14499185</a>">http://www.slideshare.net/idhatak/ss-14499185">http://www.slideshare.net/idhatak/ss-14499185</a></a></p>

<!--more-->

<p>諸般の事情でまだサービスリリースがされていないこともあり、かなり概説的な内容となっています。このような場でトークさせていただくのは MySQL Casual に続いて2度目だったのですが、内容が少し分散してしまいまとまりのない感じになってしまったところが反省でした。</p>

<p>YAPC でのスピーカーは一つの目標でした。</p>

<p>はじめて Perl-CGI に触れたのは高校生の頃でした。当時はアクセスカウンタや掲示板のスクリプトでしたが、&#8221;プログラムがホームページで動く&#8221; ということ自体にわくわくしながら見よう見まねでいじってました。大学でもデータ解析やサーバ管理など、何かプログラムを書くときには Perl を使っていました。</p>

<p>その後、社会に出てから改めてオブジェクト指向やモダンな Perl を学びました。サーバ管理などの小さなスクリプトからWebサービスまで、業務で利用してきた期間も5年近くになります。私にとっての Perl はこれまで一番お世話になっているプログラム言語であり、今エンジニアとして仕事をしているのも Perl のおかげだと思っています。</p>

<p>昨年の YAPC::Asia Tokyo 2011 で @lestrrat さんや @941 さんが「来年はないかも知れない」という話をされていたこともあり、開催告知がされた時に応募しようと思っていました。お世話になった Perl を盛り上げたい、何か恩返しにでもなればという思いからでした。</p>

<p>このような思いを踏まえてうまく伝えられなかったなと反省しているのですが、拙い発表を聞いていただいた方の中に一人でも何か新しいこと・今までと違う視点に気づいていただけたならそれで良いのだと自分に言い聞かせています。</p>

<p>年に一度のお祭りですが、参加するたびに自分が Perl を取り巻く文化に魅了されていることに気づかされます。 様々なトークがあり、いろんな視点での意見が交わされているのはとても刺激になりますし、テンションも上がります。この勢いでサービスもうまく形にして、同時に自分自身についてもしっかりと考えていきたいと思いました。</p>

<p>他のトークに優先して聞きに来てくださったみなさま、素敵なカンファレンスを運営してくださっている JPA とスタッフのみなさま、そして多くのスポンサーのみなさま、ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Casual Talks Vol.3 で話してきた]]></title>
    <link href="http://blog.hatak.net/2012/04/20/12428"/>
    <updated>2012-04-20T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/04/20/mysql-casual-talks</id>
    <content type="html"><![CDATA[<p>4/19 にオラクルセンター青山で <a href="http://atnd.org/events/26373" title="MySQL Casual Talks Vol.3">MySQL Casual Talks Vol.3</a> が開催されました。 今回は <a href="http://twitter.com/myfinder" title="@myfinder">@myfinder</a> さんにお声がけいただきトーク枠をいただけたので、挑戦させていただきました。</p>

<p><a href="http://www.slideshare.net/idhatak/mysql-casual">http://www.slideshare.net/idhatak/mysql-casual</a>">http://www.slideshare.net/idhatak/mysql-casual">http://www.slideshare.net/idhatak/mysql-casual</a></a></p>

<!--more-->

<p>小さな話をいっぱい寄せ集めた内容だったので、うまくまとめきれずすみませんでした。また、時間を気にしてしまって少し早口だったり聞き取りにくかったりした所もあったかと思います。</p>

<p>伝えたかった思いはまとめに集約しています。 何よりも「**MySQL すごいよ、ありがとう**」と言いたかったのでした。MySQL 自体のソフトウェアとしての完成度や開発体制もさることながら、多くのユーザがいて様々な知見・ノウハウが共有されているこの環境自体も大きな資産であると感じています。ない分の動きを把握していて、様々手を加えられるのはとても理想的なことですし憧れます。ですが、そこまでのスキルセットがない人でも、調べたり試したりすることである程度がんばれる、というのが環境含めて完成されている証だと思っています。 また、これは MySQL に限った話ではないのですが、私自身の考えとして実際のサービス運用では様々な視点・知識・経験が必要だと思っています。「何でも屋になろう」ということではなく、「視点を変えてみるとうまくいくんじゃないかな」「そのためには薄くでも知識や経験があると取っつきやすいんじゃないかな」という考えです。サービスを運用していく以上は、使っていただいているユーザさんを「もてなす」心を意識して、そのためにどうすればいいかを考えてメンバーと協力して作り上げていきたいと思っています。</p>

<p>偉そうなことを言いながらも最近は直接のインフラ運用をしていないことも多いのですが、全体としては業務に限らない私自身の経験や思いをまとめたものとさせていただきました。 このような公の場でトークさせていただくのは初めてだったのですが、資料を作る時点で様々追って調べたりまとめたりと、かなり良い勉強となりました。アウトプット大事ですね。 いつもお世話になっているコミュニティに対して、今までは情報を集めて使うだけの立場だったのですが、少しずつ発信・共有する立場にもなりたいというのが今年の目標でした。まだ内容的にも未熟な点が多いと思いますが、人に説明できるまで理解をする（＝自分の言葉でかみ砕く）を重ねていってコミュニティを支えたい・恩返しをしたいと強く思った一日でした。</p>

<p>快適な会場を提供いただいた Oracle のみなさま、とりまとめていただいた運営のみなさま、そしてお集まりいただいて素敵な時間を共有していただいた参加者のみなさま、ありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hachioji.pm #11 に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/12/04/9188"/>
    <updated>2011-12-04T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/12/04/hachioji-pm-11</id>
    <content type="html"><![CDATA[<p>町田で行われた hachioji.pm #11 に参加してきました。 前回参加した hachioji.pm が 2 月実施の #2 だったので、9 回ぶり 2 回目の参加でした。振り返れば震災以降ドタバタといろんなことがあって参加できないままだったわけで、ちょっと勿体ないことしたなと反省したりもしてました。</p>

<p>町田も久しぶりすぎて変化に戸惑いが隠せない感じでした。資料作成しようと思ったカフェとかなくなってたし！</p>

<h2 id="toc_5">全体的な感想など</h2>

<p>自己紹介代わりの LT はやっぱりおもしろいと思います。規模が大きくなると難しくなりますが、全員に向かって各々が話す hachioji.pm ならではの雰囲気は好きです。</p>

<p>かなり様々なお話を聞けたことも大きな収穫でした。同時に、モチベーションが上がるような刺激を受けることができました。</p>

<!--more-->

<p>その他、つらつらと思ったことを。</p>

<ul>
<li>ネタが意外とかぶっててなんかずるい &#8211; &#8220;退職しました&#8221; &#8211; &#8220;うれしいこと（内定・転職・おめでた）ありました&#8221; &#8211; &#8220;北海道&#8221;</li>
<li>会場となったお店がよかった &#8211; 屋根裏っぽい雰囲気がよかった &#8211; 料理（とくに鍋）もおいしかった &#8211; オリオンビールが飲みやすかった &#8211; @ytnobody++</li>
<li>業界狭い &#8211; いろんな方とのつながりはやっぱり大事</li>
</ul>

<h2 id="toc_6">MySQL の preload</h2>

<p>LT で話した資料をこちらにおいてあります (PDF 形式です)。 お題の「○○道」でネタを探していたのですが、preload のことで頭いっぱいだったこともありライトな感じにざっとまとめてみました。</p>

<p>周りの方にアドバイスいただいたり、調べたり、試したりしたものを組み合わせた結果、個人的な答えとして今はこのような手法がよいのかなと考えています。ただ、もっと <strike>楽な</strike> 効率のよい方法など、実際に皆さんがどのようにされているかを知りたいなと思っているところです。</p>

<p>幹事の @ytnobody さん、主催の @uzulla さん、そして参加された皆さん、お疲れさま &amp; ありがとうございました。 また次回も都合をつけて参加したいなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2011 (2日目) に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/10/16/6777"/>
    <updated>2011-10-16T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/10/16/yapcasia-tokyo-2011-2</id>
    <content type="html"><![CDATA[<p>昨日に引き続いて、 <a href="http://yapcasia.org/2011/" title="YAPC::Asia">YAPC::Asia</a> に参加してきました。</p>

<p>個人的な視点で、今回の YAPC から感じた Perl とそれを取り巻く Web サービス系の世界の現状をいくつかまとめると、</p>

<ul>
<li>前回参加した 2 年前に発表された PSGI はもはや標準</li>
<li>プラットフォーマーを中心に大規模サービスのノウハウが溜まってきている</li>
<li>アプリケーションの設計・実装でも、ミドルウェアやハードウェアも含めた視点がより大事になっている</li>
<li>組織が大きくなった会社では、開発者と運用者の良い関係づくり (DevOps の考え方) に取り組んでいる</li>
</ul>

<p>といったところかなと思います。 会社で標準的に使われている開発言語が違っても、根底の考え方や Web サービス系全般での動きは同じだなと痛感しました。</p>

<!--more-->

<hr>

<h2 id="toc_7">続 Unix Programming with Perl</h2>

<p>※講演資料 <a href="http://www.slideshare.net/kazuho/unix-programming-with-perl-2">[No Title]</a> DeNA の kazuho (<a href="http://twitter.com/kazuho">@kazuho</a>) さんの講演。<a href="http://www.slideshare.net/kazuho/unix-programming-with-perl">前回</a>に引き続いて、Unix 環境で正しく動くコードを作るための Tips 紹介のトークでした。Unix の知識が足りずまだ理解が追いついていないので、調べて試さないとと感じた発表でした。</p>

<h3 id="toc_8">正しいコードを書くために</h3>

<ul>
<li>テストだけでは足りない</li>
<li>常に正しく動くコードを書くためには知識が必要 &#8211; Perl の知識 &#8211; OS の知識</li>
</ul>

<h3 id="toc_9">IPC::Open3 によるプロセス間通信</h3>

<ul>
<li>pipe したときにブロックしてしまうケースがある &#8211; 子プロセスが STDIN 待ちになる場合 &#8211; 子プロセスが大量のエラーを吐く場合 &#8212; pipe が制限を持っている &#8212;- MacOSX : 16 Kbyte &#8212;- Linux2.6 : 64 Kbyte</li>
<li>deadlock とならないためには？ &#8211; クローズしてもうまくいかない &#8211; 標準出力全部読んでもうまくいかない &#8211; IPC::Open3 のオプションとして、標準エラー出力に undef いれる &#8211; pipe を使わず temporary file 使えばいい</li>
</ul>

<h3 id="toc_10">Unix signals と race condition (競合状態)</h3>

<ul>
<li>POSIX::pselect &#8211; pselect の外で SIGHUP &#8212; 多くのディストーションでの実装がバグっているため、実際には解決しない &#8211; eval &amp; die &#8212; これでもうまく解決しない &#8211; call syswrite on signal</li>
</ul>

<h2 id="toc_11">まとめ</h2>

<ul>
<li>buffesize は無限大ではない</li>
<li>shell invocation は危険なので system か IPC::Open3 を使う</li>
<li>Unix signals のハンドリングでは競合に気をつける</li>
</ul>

<hr>

<h2 id="toc_12">運用しやすいWebアプリケーションの構築方法</h2>

<p>※講演資料 <a href="http://www.slideshare.net/kazeburo/yapcasia2011">[No Title]</a> Livedoor の kazeburo (<a href="http://twitter.com/kazeburo">@kazeburo</a>) さんの講演。これまでの運用経験を基に、運用しやすい Web アプリケーションとなるためのログや DBI / cache の使い方・Tips をまとめて紹介されていました。確かに、と思うポイントが多く、とても参考になるトークでした。</p>

<h3 id="toc_13">運用しやすいとは？</h3>

<ul>
<li>耐障害性を考慮に入れた設計</li>
<li>アプリケーションからの情報発信</li>
<li>処理単位の明確化</li>
</ul>

<h3 id="toc_14">ログ</h3>

<ul>
<li>「アプリからの情報発信」 &#8211; 障害発生の際に最初に見る &#8211; 障害の検知、原因の特定</li>
<li>適切なログに含まれる情報 &#8211; 時間 &#8211; ログレベル &#8212; 基準を決めて &#8220;DEBUG&#8221;/&#8221;INFO&#8221;/&#8221;WARN&#8221;/&#8221;ERROR&#8221; を使い分ける &#8211; 環境 &#8212; pid や uid、引数など &#8211; caller / stacktrace &#8211; 読み取る人に伝わるメッセージ</li>
<li>Log::Minimal &#8211; 上記の適切なログ基準に沿ってログを出せるようにした &#8211; シリアライズ / カラーリング なども可能</li>
</ul>

<h3 id="toc_15">DBI (SQL)</h3>

<h4 id="toc_16">DB 負荷が急上昇するケース</h4>

<ul>
<li>原因クエリ探す</li>
<li>なんのクエリかアプリで確認</li>
<li>ORM を使っていると調べにくいこともある &#8211; SQL とコードが一致しなく鳴るため、SQL 生成を避けたい</li>
<li>DBIx::Sunny &#8211; caller 情報を SQL に埋込みクエリコメントにできる &#8211; SQL::Maker と組み合わせて利用できる</li>
</ul>

<h4 id="toc_17">接続が滞留するケース</h4>

<ul>
<li>最大接続数に達して接続エラー &#8211; メンテナンス時に timeout まで待つ &#8211; SHOW INNODB STATUS が見れない</li>
<li>接続滞留対策 &#8211; Scope::Container &#8212; DB 接続部の処理単位を短く、わかりやすく &#8211; Scope::Container::DBI &#8212; 上記を簡単に実現するために便利機能を追加したモジュール</li>
</ul>

<h3 id="toc_18">cache / memcached</h3>

<ul>
<li>課題 &#8211; Session::Store::Memcached &#8212; 簡単で高速、Expires 処理も自動化できる &#8212; 一方でストレージ永続性がないのは困ることもある &#8211; 特定キャッシュへの集中 &#8212; 分散アルゴリズム上でも特定サーバに集中してしまうことがある &#8211; cache thundering herd problem &#8212; memcache 上で exipre した瞬間に DB にアクセスが集中してしまう</li>
<li>Cache::Memcached::IronPlate &#8211; 冗長して保存することで cache の冗長性確保 &#8211; cache の負荷分散も行える</li>
<li>Cache::Isorator &#8211; ゆっくり expire させることができる</li>
</ul>

<h3 id="toc_19">Metrics</h3>

<ul>
<li>プロセスのステータスを取得できるようにしてグラフ化する &#8211; Plack::Middleware::ServerStatus::Lite &#8211; Parallel::Scoreboard</li>
</ul>

<h3 id="toc_20">まとめ</h3>

<ul>
<li>耐障害性を考慮に入れた設計 &#8211; cache &#8211; memcached</li>
<li>アプリケーションからの情報発信 &#8211; DBI &#8211; ログ &#8211; Metrics</li>
<li>処理単位の明確化 &#8211; DBI connection</li>
</ul>

<hr>

<h2 id="toc_21">watch your log</h2>

<p>DeNA の nekokak (<a href="http://twitter.com/nekokak">@nekokak</a>) さんの講演。社内 DevOps の観点から基準を決めてログ出力し、それを監視するためのツールを作成したというお話。&#8221;DevOps&#8221; と &#8220;ログ監視&#8221; については各社でかなり試行錯誤しているところかもしれません。 ログ監視は最近色々考えていて自分で実装しようかなと思っているところだったので、Komainu も試してみます。あと、「必要に応じたエンジニアリング」というスタンスはいいなと思います。</p>

<h3 id="toc_22">DevOps</h3>

<ul>
<li>Dev と Ops 相互に協力する事が必要 &#8211; 自社 Dev は運用を考えられなければならない &#8211; 自社 Ops は Dev から渡される運用を丸受けしてはダメ</li>
<li>Dev Ops の垣根取り払って密なコミュニケーションを</li>
<li>運用を考えられる Dev &#8211; 障害は一次対応が Ops のことが多い &#8211; 運用したことないミドルウェアを導入する場合は、事前に互いに調べて共有 &#8211; 仕様変更 / 新機能のリリースタイミングで共有を行う</li>
<li>丸受けしない Ops &#8211; サービス仕様・アーキテクチャを理解 &#8211; 障害発生時に何を対応する必要があるか理解 &#8211; 必要な情報は Dev に提出 &#8211; 「お母さん役みたいなもの」</li>
</ul>

<h3 id="toc_23">コミュニケーション濃度の問題</h3>

<ul>
<li>お互いしっかりコミュニケーション取る</li>
<li>コミュニケーションもレベル・粒度ある</li>
<li>「お互い言い分あるだろうが gdgd 言う前に行動しろ」</li>
</ul>

<h3 id="toc_24">障害そして監視</h3>

<ul>
<li>障害検知の仕組みとして監視必要 &#8211; 死活監視 &#8211; リソース監視 &#8211; ログ監視</li>
</ul>

<h3 id="toc_25">ログ</h3>

<ul>
<li>お互いで取り決めたフォーマットに沿ったログ出力 &#8211; Dev と Ops が面倒みるにあたって取り決めるといい</li>
<li>accesslog / errorlog &#8211; 監視する項目の取り決めをしておく &#8211; ステータスコード監視でサービスがどのような状況か分かる</li>
<li>applog (syslog) &#8211; フォーマットの取り決めが重要なところ &#8211; 障害レベルの分類をログレベルで出力するなどの取り決め &#8212; 携帯にメールか、会社のメールかでレベルか</li>
<li>mysql slow log &#8211; だいたいボトルネックは DB のことが多い</li>
<li>ログ収集方法 &#8211; ログを良い感じで監視できるソリューションがない</li>
</ul>

<h3 id="toc_26">Komainu</h3>

<ul>
<li>設定に応じて集計 &#8211; accesslog 集計 &#8211; applog 集計 &#8211; mysql slow log 集計</li>
<li>アーキテクチャ &#8211; fork model &#8211; notify は IRC と Email &#8211; データは database に保存 &#8212; サマリ集計し、前回からどれくらい増えたか知りたい &#8212; グラフ化する &#8212; プロセス間通信せずにデータを受け渡す</li>
<li>何が重要か &#8211; サービスクオリティ維持のため &#8211; 利用者からの問い合わせベースで障害に気づくのは情けない &#8211; 攻めの運用 &#8211; ログ情報を通知することでエラーに向きあう</li>
</ul>

<h3 id="toc_27"><strong>Shut the fuck up and write some code</strong></h3>

<ul>
<li>行動こそすべて</li>
<li>誰かが始めないと何も始まらない</li>
<li>問題意識を持った人が率先して行動 &#8211; コードの良し悪しなどはどうでもいい</li>
</ul>

<hr>

<h2 id="toc_28">Managing A Band Of Hackers</h2>

<p>DeNA の hidek (<a href="http://twitter.com/hidek">@hidek</a>) さんの基調講演。Perl ハッカーを束ねるマネージャーとしての考え方や経験のお話でした。 とてもいい話でした。DeNA には優秀で著名な方が集まっているイメージがありますが、このようなコミュニティというか、仲間の魅力が根底にはあるのだろうなと感じる内容でした。途中、何度もチームを褒めているところが、率直に褒めているように感じられて印象的でした。</p>

<h3 id="toc_29">management</h3>

<ul>
<li>なぜマネージャーが必要？ &#8211; 一人では規模の限界</li>
<li>集団で物事を作るということ &#8211; バラバラに動くと個人個人のプレーになってしまう &#8211; 誰かが指揮する &#8211; これがマネージャー</li>
<li>&#8220;The whole is more than the sum of its parts.&#8221; &#8211; 1 + 1 が 2 以上になるようにしなければならない</li>
</ul>

<h3 id="toc_30">tasks of the manager</h3>

<ul>
<li>マネージャーの業務にはエンジニアとしての経験が必要 &#8211; 大規模なほど広いレイヤの知識が必要</li>
</ul>

<h4 id="toc_31">project management</h4>

<ul>
<li>プロダクトのライフサイクルを維持する &#8211; エンジニアリング未経験だと無理</li>
<li>計画を立てる</li>
<li>開発中の進捗・マイルストーン管理</li>
</ul>

<h4 id="toc_32">personal matters</h4>

<ul>
<li>人事も大事</li>
<li>採用面接 &#8211; 見極める力が求められる</li>
<li>配属 &#8211; 仕事を与えるということ &#8211; その人の持ってる力などを見極めることが大切 &#8211; コミュニケーション能力も必要 &#8212; その人が何をしたいのかを聞く</li>
<li>評価 &#8211; どんな仕事をしたか、を見るためにもエンジニア経験が必要</li>
</ul>

<h4 id="toc_33">etc</h4>

<ul>
<li>事務仕事</li>
<li>会議 &#8211; 無駄なものもあるが、最近必要と感じることもある &#8212; 海外支社とのテレビ会議など、図を書いたりすることで理解が早くなる &#8211; Face to Face も重要</li>
</ul>

<h3 id="toc_34">the manager of hackers</h3>

<ul>
<li>少しとんがった人たちのマネージャーとして</li>
<li>Platform System Group &#8211; プロジェクト開始時は 3 名、現在 20 名 &#8211; CPAN Author が 6 名</li>
</ul>

<h4 id="toc_35">hackers はどういう人達か</h4>

<ul>
<li>&#8220;no man is an island&#8221; &#8211; 一人だと寂しくて死んじゃう</li>
<li>get bored easily &#8211; 飽きっぽい &#8211; 餌を与え続ける</li>
<li>priority &lt; interest &#8211; つまらない仕事を与えつつも、先に楽しい仕事を用意しておく</li>
<li>late morning, late nite &#8211; 働いている時間は一緒 &#8211; 裁量労働なので良いが、相談したいときにいつ来るかわからないのは困ることも</li>
<li>KY &#8211; 読めない事自体は仕事に影響しないので、悪いことではない &#8211; 悪ノリする</li>
</ul>

<h3 id="toc_36">what should I do ?</h3>

<ul>
<li>これはハッカーのマネージャーだけでなく、一般でも通じるところはある</li>
</ul>

<h4 id="toc_37">delegation</h4>

<ul>
<li>仕事を任せる &#8211; 失敗もするけど、任せると成長する</li>
<li>自分でやっちゃおう、と思うこともある</li>
<li>「任せる」と「丸投げ」は違う &#8211; 任せるための準備はする &#8211; バックアッププランは作る &#8211; 失敗したらマネージャーが責任を持つ</li>
</ul>

<h4 id="toc_38">bad news first</h4>

<ul>
<li>悪い報告を先にするようにしてもらう</li>
</ul>

<h4 id="toc_39">TMTOWTDI</h4>

<ul>
<li>やり方は一つではない &#8211; これはマネジメントだけではない</li>
<li>多様性を許容する</li>
</ul>

<h3 id="toc_40">マネージャが少ない会社は大変</h3>

<ul>
<li>マネージャは優秀なエンジニアじゃないとできない &#8211; 選択肢として考えて欲しい</li>
</ul>

<h3 id="toc_41">コミュニティに参加して欲しい</h3>

<ul>
<li>技術的な刺激を受けられる</li>
<li>人脈を作る &#8211; マネージャとして重要 &#8211; 最終的には経験の糧になる</li>
</ul>

<hr>

<p>このほか、LT なども面白く刺激的なものが多く、とても良いカンファレンスでした。</p>

<p>次回がどのようになるかはまだ未定とのことでしたが、次回が YAPC::Asia どこで行われても参加したいと思っています。同時に、これまではカンファレンスやセミナーに参加しつつもずっと聞く側でしたが、今後は YAPC に限らず、もっとコミュニティ全般に対して積極的に貢献できる活動をしたいと思った 3 日間でした。</p>

<p>発表者、スタッフ、参加者、そしてスポンサー企業のみなさま、お疲れ様でした。</p>
]]></content>
  </entry>
  
</feed>
