<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tag: adventcalendar | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/tags/adventcalendar/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T16:37:06+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[hatak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[0歳児との生活]]></title>
    <link href="http://blog.hatak.net/2012/12/17/17651"/>
    <updated>2012-12-16T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/12/17/kosodate-advent</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://atnd.org/events/34177">子育てエンジニア advent calendar 2012</a> への参加エントリー（16日目）です。</p>

<p>選挙速報を見ながら書いていたのですが、ぎりぎりになったところで子供に泣かれてあやしていたら日付を超えてしまいましたすみません。。。 様々な政策が再び大きく変わりそうですが、子育て支援をはじめとして親としては気になる内容も多いので見守りつつ書いています。</p>

<!--more-->

<p>今年の1月に子供が産まれました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/14531906/hatak.github.io/2012/12/helloworld-225x300.jpg" alt="Hello World" width="225" height="300" class="alignnone size-medium wp-image-17649" /></p>

<h2 id="toc_392">変わったこと</h2>

<p>生活は大きく変わりました。</p>

<p>例えばおでかけの時。妻と2人で散歩してるときはあまり気にせず公園の中も自由に歩けていましたが、ベビーカーを使っていると特定のスロープを通るルートしか選べなかったり。出かける先も授乳室やおむつ替えスペースがありそうなところであったり、食事をするのも子供連れでも利用できるレストランを探したり。帰ってくるのも遅くなりすぎない時間に戻れるようなスケジュール（しかも、30分程度はバッファを見た上で）をなんとなく考えるようになりました。</p>

<p>そういう意味では、視点も大きく変わったのかなと思います。</p>

<p>買い物も大きく変わった一つかと思います。</p>

<p>妊娠中、重い買い物をしなくても良いようにと個人宅配に加入したのですが、これはとても良い選択でした。休みの日に家族 3 人で買い物にでかけるのは良いのですが、子供をだっこして重い買い物袋をいくつも持ってくるのは大変です。もちろん、平日に妻が子供と2人で毎日買い物に行くことはもっと大変です。 そこで、お米やたまご、常備菜などの重かったり運びにくい食材は宅配にお願いして、必要なものを都度、私が帰りがけに買って帰るなどの運用になりました。宅配の商品は店頭より高かったり、半月ほど前には注文を提出する必要があったりすることもありますが、持ち帰る手間や届く品物の質を考えれば良いかなと考えるようになりました。</p>

<p>また、生活雑貨ではネット通販に大変お世話になっています。中でも一番お世話になっているのは Amazon です。取扱品が多くて探しやすく、店頭価格と比べても変わりない（場合によっては店頭より安いこともある）ので、おむつなどかさばる商品はとても便利です。</p>

<p>ちなみに、最近は &#8220;Amazon ファミリー&#8221; というパパ・ママ向けのサービスをしています。初回登録時のクーポンや Amazon プライム無料お試しなど、特典が魅力的なのでおすすめです。</p>

<p>あとは、周りのお父さんが口を揃えていうことですが、本当に時間がないです。覚悟していた以上でした。 起きているときは一緒に遊んだり見守ったりしますし、寝てるときも突然夜泣きしたり寝ぼけて起き上がったりします。そもそもすんなり寝付いてくれません。寝不足にもなりますし、イライラしてしまうこともあります。 この問題については、未だに試行錯誤の毎日です。どうやって時間を作り、効率良く自分の時間を使い、満足するか。子供と一緒に成長していくしかないのかなと思ったりしています。</p>

<h2 id="toc_393">感じたこと</h2>

<p>子供ができて、考えるようになったことも多くあります。</p>

<p>なによりも、妻への感謝でした。 育児休業で自宅にずっといるのですが、それでも掃除や洗濯・炊事などをしながら子供の面倒を見てくれているわけで、平日に関してはかなりの負担をかけてしまっています。平日はできるだけ早く帰って妻の話を聞いてあげる時間をとったり、休日は家族で気分転換になるよう出かけたりと努力してみましたが、それでもまだ足りないかなと思っています。 子供にとってのお母さんは、お父さんが代わりになることはできないほどの存在に見えます。眠いとき・不安な時などはお母さんにだっこされて授乳しないと落ち着かなかったりします。 それほどに大事な存在だからこそ、適度にリフレッシュしながら毎日楽しく育児をして欲しいと思うわけです。妻はしっかりしている人なので産まれる前は大丈夫かなと思っていたのですが、実際に産まれてから半年くらいするとかなり精神的に参ってきていたようです。時々実家に帰省したり、旅行にいったりしたのは気分転換にはなったようです。 家族として、夫として、妻や子供を支えられるようにならなければと強く思うようになりました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/14531906/hatak.github.io/2012/12/reflesh-300x225.jpg" alt="Refresh" width="300" height="225" class="alignnone size-medium wp-image-17650" /></p>

<p>次に、仕事のことでした。 偶然にも、今年の始めに私の職務内容が変わるチャンスがあり、昨年のような深夜作業・障害対応がメインの仕事ではなくなりました。家庭の生活リズムがつかみにくい時期に仕事のリズムが調整可能であったことはとても運の良いことでした。 一方で、生活の中でしめる仕事の割合の大きさにも気づかされました。時間はもちろん、仕事に関連した生活リズムや夜中のアラートなど、妻だけであれば説明して我慢してもらえるものでも子供の場合は異なってくることもあります。自分の仕事や年齢、家族との生活とのバランスなどを立ち返って考えるきっかけにはなりました。</p>

<h2 id="toc_394">来年に向けて</h2>

<p>今後も子供・家族との時間を大事にできるエンジニアを目指して成長したいと思います。</p>

<p>子供を見ていると、その好奇心の旺盛さと成長の早さにはかなり刺激を受けます。大人が見過ごしてしまうようなものを見つけたり、昨日できなかったことが今日できるようになっていたり。負けじと親も成長しなきゃ、と焦ってしまうことも。 でも、焦りすぎてもダメなんだと思います。離乳食を始めても、いろんな食材を一つずつ、少量から試していってアレルギー反応が出ないことを確認していくのです。そうして積み重ねていけば、大きくなったらいろいろ食べられるようになるのです。</p>

<p><img src="https://dl.dropboxusercontent.com/u/14531906/hatak.github.io/2012/12/github-225x300.jpg" alt="Github" width="225" height="300" class="alignnone size-medium wp-image-17648" /></p>

<p>着実に成長を重ねていって、いつか親子でペアプロするような機会があればいいなと思います。 そうそう、この <a href="http://shop.github.com/products/octocat-onesie">github のロンパース</a> が結構かわいいです。親が好きな服を着せられるのも今のうちかなと思って買ってしまいました。</p>

<p>あまりエンジニア的な話ができずすみません。でも、同じような立場で子育てをされている方の話を聞いてみたい、といつも思っていたので、このような企画に参加できてとてもよかったです。企画してくださった @choplin さんに感謝いたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[レプリケーションが追いつかないときに試すこと]]></title>
    <link href="http://blog.hatak.net/2011/12/07/9407"/>
    <updated>2011-12-07T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/12/07/mysql-advent</id>
    <content type="html"><![CDATA[<p>&#8220;<a href="http://mysql-casual.org/2011/11/mysql-casual-advent-calendar-2011.html" title="MySQL Casual Advent Calendar 2011">MySQL Casual Advent Calendar 2011</a>&#8221; 7 日目を担当させていただく、hatak (<a href="http://twitter.com/hisashi" title="@hisashi">@hisashi</a>) です。 普段はモバイルゲームのインフラをメインにみているのですが、今回はそんな業務で経験したことを基に記事を書かせていただきます。 カジュアルすぎる内容かもしれませんが、お付き合いいただければと思います。</p>

<!--more-->

<h2 id="toc_395">MySQL のレプリケーション</h2>

<p>MySQL のレプリケーションは、安定稼働やバックアップ、負荷分散などの目的に利用できる優れた機能です。 bin-log (バイナリログ) を利用して Master サーバから Slave サーバに更新を伝播させ、データの複製を行います。Slave サーバでは、2 つのスレッドが動作しています。</p>

<ul>
<li>IO_THREAD &#8211; Master から送られてきたデータを受け取り、relay-log (リレーログ) として書き出す</li>
<li>SQL_THREAD &#8211; relay-log を読み出し、DB を更新する</li>
</ul>

<h2 id="toc_396">遅延の調べ方</h2>

<p>&#8220;SQL_THREAD&#8221; による遅延の場合は、Slave サーバで &#8220;SHOW SLAVE STATUS&#8221; コマンドを実行することで確認ができます。</p>
<div class="highlight"><pre><code class="text">hatak@dbslave&gt; SHOW SLAVE STATUS G\
*************************** 1. row ***************************
Slave_IO_State: Waiting for master to send event
Master_Host: 192.168.12.2
Master_User: replicator
Master_Port: 3306
Connect_Retry: 60
Master_Log_File: mysql-bin.012863
Read_Master_Log_Pos: 205295676
Relay_Log_File: mysqld-relay-bin.026640
Relay_Log_Pos: 75468325
Relay_Master_Log_File: mysql-bin.012863
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
Replicate_Do_DB:
Replicate_Ignore_DB:
Replicate_Do_Table:
Replicate_Ignore_Table:
Replicate_Wild_Do_Table:
Replicate_Wild_Ignore_Table:
Last_Errno: 0
Last_Error:
Skip_Counter: 0
Exec_Master_Log_Pos: 205295676
Relay_Log_Space: 205296082
Until_Condition: None
Until_Log_File:
Until_Log_Pos: 0
Master_SSL_Allowed: No
Master_SSL_CA_File:
Master_SSL_CA_Path:
Master_SSL_Cert:
Master_SSL_Cipher:
Master_SSL_Key:
Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
Last_IO_Errno: 0
Last_IO_Error:
Last_SQL_Errno: 0
Last_SQL_Error:
Replicate_Ignore_Server_Ids:
Master_Server_Id:100
1 row in set (0.00 sec)
</code></pre>
</div>

<p>ここに示されている &#8220;Seconds_Behind_Master&#8221; の値が、「現在 SQL_THREAD が実行しているクエリの実行時刻」と「Slave サーバが保持しているリレーログの時刻」の差となり、遅延を表しています。</p>

<p>&#8220;IO_THREAD&#8221; による遅延の場合は、Master からのバイナリログが受信しきっていないため、Master における &#8220;SHOW MASTER STATUS&#8221; の結果も参考にする必要があります。</p>
<div class="highlight"><pre><code class="text">hatak@dbmaster&gt; SHOW MASTER STATUS G\
*************************** 1. row ***************************
File: mysql-bin.012863
Position: 205295676
Binlog_Do_DB:
Binlog_Ignore_DB:
1 row in set (0.00 sec)
</code></pre>
</div>

<p>この結果を基に、どれくらいずれているかを見なければなりません。</p>

<p>Master と Slave で &#8220;File&#8221; と &#8220;Master_Log_File&#8221;、&#8221;Position&#8221; と &#8220;Read_Master_Log_Pos&#8221; をそれぞれ比較し、どの程度転送が遅れているかをチェックします。 &#8220;IO_THREAD&#8221; に起因した遅延の場合は、サーバの処理というよりはネットワーク帯域の問題である可能性が高いと思います。</p>

<p>今回は &#8220;SQL_THREAD&#8221; による遅延を想定してまとめていきます。</p>

<h3 id="toc_397">Master の更新をブロックする</h3>

<p>レプリケーションで送られてくるクエリの流量が多すぎる場合、つまり Master の更新が激しすぎて追いつかないケースでは、そもそも Master での更新を止めてしまうという方法があります。</p>

<p>これは、MASTER_POS_WAIT() 関数を利用することで実現できます。</p>

<p>手順については、<a href="http://dev.mysql.com/doc/refman/5.1/ja/" title="MySQL5.1 リファレンスマニュアル">MySQL5.1 リファレンスマニュアル</a>の FAQ 項目内に「<a href="http://dev.mysql.com/doc/refman/5.1/ja/replication-faq.html#qandaitem-5-4-4-1-4" title="レプリケーションが追いつくまでマスタの更新をブロックする方法">レプリケーションが追いつくまでマスタの更新をブロックする方法</a>」として紹介されています。</p>

<p>この方法では同期化をコントロールすることで追いつかせることができますが、実際にサービス運用中のサーバではなかなか使いづらいところもあります。</p>

<h3 id="toc_398">Slave のパフォーマンスを調整する</h3>

<p>このとき、レプリケーションで伝播するクエリは全て直列化されるため、更新が激しい場合はどうしても遅れてしまうことがあります。 DiskI/O への負荷が高いとき &#8220;innodb-flush-log-at-trx-commit&#8221; の値を変更することで、ディスクへのフラッシュを減らすことができます。このパラメータではログバッファからログファイルへの書き込み、およびディスクへのフラッシュをコントロールすることができます。</p>

<table><thead>
<tr>
<th>設定値</th>
<th>ログバッファのファイルへの書き込み</th>
<th>ディスクへのフラッシュ</th>
<th>備考</th>
</tr>
</thead><tbody>
<tr>
<td>0</td>
<td>毎秒</td>
<td>ログファイル上</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>コミット時</td>
<td>ログファイル上</td>
<td>デフォルト値</td>
</tr>
<tr>
<td>2</td>
<td>コミット時</td>
<td>毎秒</td>
<td></td>
</tr>
</tbody></table>

<p>この設定値によるパフォーマンス向上度合いは、経験的には効果の大きい順に 0 &gt; 2 &gt; 1 の順と思っています。</p>

<p>my.cnf に記述し起動時に適用することもできますが、 mysqld の再起動をせずに変更・反映が可能です。</p>
<div class="highlight"><pre><code class="sql"><span class="k">SELECT</span> <span class="o">@@</span><span class="n">innodb_flush_log_at_trx_commit</span><span class="p">;</span>
<span class="k">SET</span> <span class="k">GLOBAL</span> <span class="n">innodb_flush_log_at_trx_commit</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre>
</div>

<p>この設定値はパフォーマンス向上の代わりに、信頼性を犠牲にします。プロセスが突然落ちた場合などにディスクにフラッシュされていないデータをロストする可能性がありますので、状況に応じて（あるいは追いつかせるまでの間だけなど）の使用に抑えることが良いかと思います。</p>

<h2 id="toc_399">まとめ</h2>

<p>MySQL のレプリケーションが追いつかない場合、プロセスの再起動を行わずに簡単に試せて効果の期待できる方法をまとめてみました。</p>

<p>「実践ハイパフォーマンスMySQL」や「エキスパートのためのMySQLトラブルシューティングガイド」などの書籍でもわかりやすく紹介されていますので、ぜひご参照ください。</p>

<p>このほか、サーバ上で不要なデーモン(cpuspeed など)が動いていないかチェックする、ionice(I/O スケジューラを cfq にする必要があります) で mysqld が優先的に DiskI/O を使えるようにするなどサーバ側でもできることはありそうです。</p>

<p>間違っているところや、他にもこんな方法がある、などございましたらぜひお聞かせください。</p>

<p>明日は <a href="http://twitter.com/kamipo" title="@kamipo">@kamipo</a> さんです！</p>
]]></content>
  </entry>
  
</feed>
