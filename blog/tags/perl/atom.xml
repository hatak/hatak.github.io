<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tag: perl | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/tags/perl/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T16:33:39+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[hatak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2012 で話してきた]]></title>
    <link href="http://blog.hatak.net/2012/09/29/17281"/>
    <updated>2012-09-29T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/09/29/yapcasia-tokyo-2012</id>
    <content type="html"><![CDATA[<p>9/27-29 の日程で東京大学で <a href="http://yapcasia.org/2012/" title="YAPC::Asia 2012">YAPC::Asia Tokyo 2012</a> が開催されています。 応募したトークを採用していただいたので、スピーカーとして参加させていただきました。</p>

<p><a href="http://www.slideshare.net/idhatak/ss-14499185">http://www.slideshare.net/idhatak/ss-14499185</a>">http://www.slideshare.net/idhatak/ss-14499185">http://www.slideshare.net/idhatak/ss-14499185</a></a></p>

<!--more-->

<p>諸般の事情でまだサービスリリースがされていないこともあり、かなり概説的な内容となっています。このような場でトークさせていただくのは MySQL Casual に続いて2度目だったのですが、内容が少し分散してしまいまとまりのない感じになってしまったところが反省でした。</p>

<p>YAPC でのスピーカーは一つの目標でした。</p>

<p>はじめて Perl-CGI に触れたのは高校生の頃でした。当時はアクセスカウンタや掲示板のスクリプトでしたが、&#8221;プログラムがホームページで動く&#8221; ということ自体にわくわくしながら見よう見まねでいじってました。大学でもデータ解析やサーバ管理など、何かプログラムを書くときには Perl を使っていました。</p>

<p>その後、社会に出てから改めてオブジェクト指向やモダンな Perl を学びました。サーバ管理などの小さなスクリプトからWebサービスまで、業務で利用してきた期間も5年近くになります。私にとっての Perl はこれまで一番お世話になっているプログラム言語であり、今エンジニアとして仕事をしているのも Perl のおかげだと思っています。</p>

<p>昨年の YAPC::Asia Tokyo 2011 で @lestrrat さんや @941 さんが「来年はないかも知れない」という話をされていたこともあり、開催告知がされた時に応募しようと思っていました。お世話になった Perl を盛り上げたい、何か恩返しにでもなればという思いからでした。</p>

<p>このような思いを踏まえてうまく伝えられなかったなと反省しているのですが、拙い発表を聞いていただいた方の中に一人でも何か新しいこと・今までと違う視点に気づいていただけたならそれで良いのだと自分に言い聞かせています。</p>

<p>年に一度のお祭りですが、参加するたびに自分が Perl を取り巻く文化に魅了されていることに気づかされます。 様々なトークがあり、いろんな視点での意見が交わされているのはとても刺激になりますし、テンションも上がります。この勢いでサービスもうまく形にして、同時に自分自身についてもしっかりと考えていきたいと思いました。</p>

<p>他のトークに優先して聞きに来てくださったみなさま、素敵なカンファレンスを運営してくださっている JPA とスタッフのみなさま、そして多くのスポンサーのみなさま、ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テストのために Redis を立ち上げたかった]]></title>
    <link href="http://blog.hatak.net/2012/08/16/15712"/>
    <updated>2012-08-16T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/08/16/redis</id>
    <content type="html"><![CDATA[<p>ミドルウェアを使った処理のテストでは、テストのための設定でその時限りのデーモンを立ち上げて使いたいものです。 例えば MySQL であれば <a href="https://metacpan.org/module/Test::mysqld">Test::mysqld</a> 、memcached であれば <a href="https://metacpan.org/module/Test::TCP">Test::TCP</a> などを使うことで手軽にデーモンを立ち上げる仕掛けを作ることができます。これを prove にフックさせたりすると、マニュアルでテスト用のデーモンを立ち上げる必要がなくなるという方法がとれます。</p>

<!--more-->

<ul>
<li><a href="http://perl-users.jp/articles/advent-calendar/2011/test/18">テストのためにデーモンを自動的に起動するやりかた2011年版 &#8211; Perl Advent Calendar Japan 2011 Test Track</a></li>
<li><a href="http://blog.riywo.com/2011/12/28/035420">perlbrew+Carton+Amon2+Test::mysqldみたいな &#8211; As a Futurist&#8230;</a></li>
</ul>

<p>Redis を使った処理のテストを書く必要があり、これと同じような方法で立ち上げる設定を作ろうとしました。 デフォルトとは異なるポートで Redis のサーバを立ち上げてあげればいいのですが、redis-server コマンドは起動時の引数で直接ポート指定ができず設定ファイルとして渡す必要があります。ちょっと面倒だな、と思って手抜きをしようと探したところ、<a href="https://metacpan.org/module/Redis">p5-Redis</a> のテストコードの中に目的のものを見つけました。</p>

<ul>
<li><a href="https://github.com/melo/perl-redis/blob/master/t/tlib/Test/SpawnRedisServer.pm">perl-redis/t/tlib/Test/SpawnRedisServer.pm at master · melo/perl-redis · GitHub</a></li>
</ul>

<p>このモジュールを use して、テスト開始時に呼び出して Redis のデーモンを起動、テスト終了後にデーモンを終了してあげればよさそうです。 フレームワークとして Amon2 を使っていたので、t::Util のようなモジュールを作って必要なテストで use してあげるような仕組みでやってみました。</p>
<div class="highlight"><pre><code class="perl"><span class="nb">package</span> <span class="nn">t::</span><span class="n">Util</span><span class="p">;</span>

<span class="k">use</span> <span class="nn">Test::</span><span class="n">SpawnRedisServer</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$REDIS</span><span class="p">;</span>
<span class="k">use</span> <span class="n">MyApp</span><span class="p">;</span>

<span class="p">{</span>
    <span class="c1"># start redis-server with Test::SpawnRedisServer (via p5-Redis)</span>
    <span class="nv">$ENV</span><span class="p">{</span><span class="n">REDIS_DEBUG</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="p">(</span><span class="nv">$REDIS</span><span class="p">,</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">TEST_REDIS</span><span class="p">})</span> <span class="o">=</span> <span class="n">redis</span><span class="p">();</span>
    <span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="n">MyApp</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
    <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">setup_schema</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">END</span> <span class="p">{</span>
    <span class="c1"># stop redis-server</span>
    <span class="nv">$REDIS</span><span class="o">-&gt;</span><span class="p">()</span> <span class="k">if</span> <span class="nv">$REDIS</span><span class="p">;</span>
<span class="p">}</span>

<span class="mi">1</span><span class="p">;</span>
</code></pre>
</div>

<p>$ENV{TEST_REDIS} に格納されるのは &#8220;127.0.0.1:11121&#8243; のような接続先アドレスなので、Redis への接続時に使われるように設定しました。</p>

<p>config はこんな感じ。</p>
<div class="highlight"><pre><code class="perl"><span class="nb">die</span> <span class="k">unless</span> <span class="p">(</span><span class="nb">defined</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">TEST_REDIS</span><span class="p">});</span>
<span class="o">+</span><span class="p">{</span>
    <span class="s">&quot;Redis&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="n">server</span> <span class="o">=&gt;</span> <span class="nv">$ENV</span><span class="p">{</span><span class="n">TEST_REDIS</span><span class="p">},</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre>
</div>

<p>コンストラクタはこんな感じ。(Teng とかとほぼ同じですが。。)</p>
<div class="highlight"><pre><code class="perl"><span class="nb">package</span> <span class="n">MyApp</span> <span class="mf">0.01</span><span class="p">;</span>

<span class="k">use</span> <span class="n">v5</span><span class="mf">.14</span><span class="p">;</span>
<span class="k">use</span> <span class="n">parent</span> <span class="sx">qw/Amon2/</span><span class="p">;</span>

<span class="k">use</span> <span class="n">Redis</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">redis</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">defined</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">redis</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$conf</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">config</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">Redis</span><span class="p">}</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&#39;missing configuration for &quot;Redis&quot;&#39;</span><span class="p">;</span>
        <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">redis</span><span class="p">}</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="nv">%</span><span class="p">{</span><span class="nv">$conf</span><span class="p">});</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">redis</span><span class="p">};</span>
<span class="p">}</span>

<span class="mi">1</span><span class="p">;</span>
</code></pre>
</div>

<p>これで無事、テストを走らせるときに一緒に Redis が立ち上がるようになりました。</p>
<div class="highlight"><pre><code class="perl"><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">use</span> <span class="nn">t::</span><span class="n">Util</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Test::</span><span class="n">More</span><span class="p">;</span>
<span class="k">use</span> <span class="n">MyApp</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$c</span> <span class="o">=</span> <span class="n">MyApp</span><span class="o">-&gt;</span><span class="n">bootstrap</span><span class="p">;</span>

<span class="n">is</span><span class="p">(</span><span class="nv">$c</span><span class="o">-&gt;</span><span class="n">redis</span><span class="o">-&gt;</span><span class="n">ping</span><span class="p">,</span> <span class="s">&quot;PONG&quot;</span><span class="p">);</span>

<span class="n">done_testing</span><span class="p">;</span>
</code></pre>
</div>

<p>めでたしめでたし。</p>

<p>と思ったら、ちゃんと <a href="https://metacpan.org/module/Test::RedisServer">Test::RedisServer</a> というモジュールがつくられていました。</p>

<ul>
<li>  <a href="http://unknownplace.org/memo/2012/07/31/1/">Test::RedisServer ってのを書いた &#8211; unknownplace.org</a></li>
</ul>

<p>こちらだと Test::mysqld と同じように書けるのですっきりして見やすそうです。typester++</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PSGI アプリを supervisord + Server::Starter で動作させる]]></title>
    <link href="http://blog.hatak.net/2012/08/08/14714"/>
    <updated>2012-08-08T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/08/08/psgi</id>
    <content type="html"><![CDATA[<p>PSGI で動作する Perl の Web アプリをデプロイする環境をどのように作ろうかと思って試してみたので、その手順をまとめてみます。 記事を書きかけて放置してしまっていたので、diff が古かったりするのはご愛敬で。。</p>

<!--more-->

<h2 id="toc_286">構成の概要</h2>

<p>今回構築しようと思う構成は次の通りです。</p>

<ul>
<li>PSGI を用いた簡単な Web アプリ</li>
<li>アプリを動作させる Perl とそのモジュール群は perlbrew + Carton で管理

<ul>
<li>複数のシステムを同一サーバで動かす可能性もあるため分離しておきたい</li>
<li>Carton 使ってみたい</li>
</ul></li>
<li>アプリケーションサーバには Server::Starter + Starman を利用

<ul>
<li>Hotdeploy できるようにするため</li>
</ul></li>
<li>Server::Starter のプロセスは Supervisord で管理</li>
</ul>

<h2 id="toc_287">supervisord の導入</h2>

<p><a href="http://blog.glidenote.com/blog/2011/11/25/install-supervisor/">スーパーサーバーSupervisorの導入手順メモ &#8211; Glide Note &#8211; グライドノート</a> を参考に supervisord を導入します。<br>
今回は CentOS 6 系のサーバで system python に pip 経由でインストールします。 pythonbrew などを利用してシステムと切り離すことも検討したのですが、supervisord を使う目的が OS とアプリの間でプロセス管理をすることなので system python で問題ないと考えました。</p>
<div class="highlight"><pre><code class="text"># setuptools + pip + supervisord のインストール
sudo yum install python-setuptools
sudo easy_install pip
sudo pip install supervisord

# ログ保存用ディレクトリ作成
sudo mkdir /var/log/supervisord/

# 個別設定を格納するディレクトリを作成
sudo mkdir /etc/supervisord.d/

# ベースとなる conf を生成
sudo su - root -c &quot;echo_supervisord_conf &gt; /etc/supervisord.conf&quot;
</code></pre>
</div>

<p>supervisord.conf も前述の記事とほぼ同じですが、umask を CentOS 風にしたいために 002 にしています。<br>
そして、下記のような /etc/init/supervisord.conf を作成した後に <code>initctl start supervisord</code> で起動します。</p>
<div class="highlight"><pre><code class="text">description &quot;supervisord&quot;
start on runlevel [2345]
stop on runlevel [!2345]
respawn exec /usr/bin/supervisord -n
</code></pre>
</div>

<p>supervisord のプロセスが正常に起動していて、ログファイル (/var/log/supervisord/supervisord.log) に正常に出力されていれば OK です。</p>

<h2 id="toc_288">supervisord 用の設定を用意する</h2>

<p>PSGI アプリを supervisord で管理するための設定を用意します。 ここで、環境変数が必要となるのでコマンドラインで調べておきます。</p>

<p>まずは、carton 利用時の perl のサーチパス (@INC) を調べておきます。</p>
<div class="highlight"><pre><code class="text">$ carton exec -I./lib/ -- perl -e &quot;print join(q/:/,@INC)&quot;
./lib/:local/lib/perl5/x86_64-linux:local/lib/perl5:.:/home/hatak/perl5/perlbrew/perls/perl-5.16.0/lib/5.16.0:/home/hatak/perl5/perlbrew/perls/perl-5.16.0/lib/5.16.0/x86_64-linux
</code></pre>
</div>

<p>同様に、今度は $PATH を調べておきます。</p>
<div class="highlight"><pre><code class="text">$ carton exec -I./lib/ -- echo $PATH
/home/hatak/.perlbrew/libs/perl-5.16.0@carton/bin:/home/hatak/perl5/perlbrew/bin:/home/hatak/perl5/perlbrew/perls/perl-5.16.0/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/hatak/bin:/home/hatak/bin
</code></pre>
</div>

<p>これらの環境変数を使って、/etc/supervisord.d/sample.ini という設定を書いていきます。 $PATH に加えて、@INC の中身を $PERL5LIB として設定し、直接 supervisord が server_start するようにします。 （server_start する部分を別のスクリプトにしてしまうと、supervisord で restart などの処理を行ってもプロセスが切り離されてしまい、管理から外れてしまう状態になってしまいます）</p>
<div class="highlight"><pre><code class="ini"><span class="k">[program:hatak]</span>
<span class="na">user</span><span class="o">=</span><span class="s">hatak</span>
<span class="na">umask</span><span class="o">=</span><span class="s">002</span>
<span class="na">environment</span><span class="o">=</span><span class="s">PERL5LIB=&quot;/home/hatak/www/sample/lib:/home/hatak/www/sample/local/lib/perl5/x86_64-linux:/home/hatak/www/sample/local/lib/perl5:/home/hatak/.perlbrew/libs/perl-5.16.0@carton/lib/perl5/x86_64-linux:/home/hatak/.perlbrew/libs/perl-5.16.0@carton/lib/perl5&quot;,PATH=&quot;/home/hatak/www/sample/local/bin/:/home/hatak/.perlbrew/libs/perl-5.16.0@carton/bin:/home/hatak/perl5/perlbrew/bin:/home/hatak/perl5/perlbrew/perls/perl-5.16.0/bin/&quot;</span>
<span class="na">command</span><span class="o">=</span><span class="s">/home/hatak/.perlbrew/libs/perl-5.16.0@carton/bin/carton exec -- /home/hatak/www/sample/local/bin/start_server --port=8080 --path=/tmp/sample.sock --interval=10 --pid-file=/tmp/sample.pid -- /home/hatak/www/sample/local/bin/plackup -s Starman -E deployment --workers=3 --backlog=1024 --max-requests=10000 --preload-app /home/hatak/www/sample/app.psgi directory=/home/hatak/www/sample</span>
<span class="na">redirect_stderr</span><span class="o">=</span><span class="s">true</span>
<span class="na">stdout_logfile</span><span class="o">=</span><span class="s">/var/log/supervisord/sample.log</span>
<span class="na">stdout_logfile_maxbytes</span><span class="o">=</span><span class="s">5MB</span>
<span class="na">stderr_logfile</span><span class="o">=</span><span class="s">/var/log/supervisord/sample.err</span>
<span class="na">stderr_logfile_maxbytes</span><span class="o">=</span><span class="s">5MB</span>
<span class="na">stdout_logfile_backups</span><span class="o">=</span><span class="s">5</span>
<span class="na">autorestart</span><span class="o">=</span><span class="s">true</span>
<span class="na">startsecs</span><span class="o">=</span><span class="s">5</span>
</code></pre>
</div>

<p>これで準備は完了です。あとは、supervisord で起動すればおしまいです。</p>
<div class="highlight"><pre><code class="text">sudo supervisorctl add sample
</code></pre>
</div>

<p>少し回りくどい構成のようにも思えますが、ソースをアップロードして server_start のプロセスに -HUP を送ることで Server::Starter がいい感じにプロセスを置き換えてくれます。また、サーバプロセスがなくなったときやサーバ再起動時などには supervisord がサーバプロセスを立ち上げてくれるので、管理も簡単です。</p>

<p>外部からのリクエストは、一度 Nginx などのリバースプロキシで受けて、動的なものだけを PSGI に送りレスポンスを返す形にすると様々な恩恵が受けられそうです。 ただ、今回試した範囲では Nginx から直接 socket に送ることができなかったのでここは今後の課題でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[perl で segmentation fault が起きたときの調べかた]]></title>
    <link href="http://blog.hatak.net/2012/06/19/14234"/>
    <updated>2012-06-19T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/06/19/perl</id>
    <content type="html"><![CDATA[<p>サーバを構築した際に嵌まったのでメモしておきます。</p>

<p>CentOS6 系のサーバに perlbrew + Carton で環境を構築していたのですが、一通り構築が終わって plackup すると segmentation fault となってしまったのでした。 /var/log/messages を見てもこんなログばかり。</p>
<div class="highlight"><pre><code class="text">Jun 18 19:28:48 xx-xxxx kernel: app.psgi[2084] general protection ip:322fe17088 sp:49302b8e8cb3704b error:0 in ld-2.12.so[322fe00000+20000]
</code></pre>
</div>

<!--more-->

<p>こんなとき、Perl に coredump を吐かせて gdb で見ることで当たりをつけることができます。</p>
<div class="highlight"><pre><code class="text"># core file size を設定（今回は仮に unlimited に）
limit -c unlimited
# segfault を起こすコマンドを実行
carton exec -- plackup app.psgi
# -&gt; セグフォ
# gdb [実行ファイル] [コアダンプファイル]
gdb `which perl` core.2084
</code></pre>
</div>

<p>こうすることで、gdb のコンソールが表示されます。 あとは where コマンドで関数の呼び出し順序を調べたり、list を使って該当ソースを見たりして当たりをつけましょう。</p>

<p>ulimit で設定していないと core ファイルが生成されないかもしれない、というお話でした。 このような当たりの付け方は Perl に限らず他のプログラムでも同様にできると思います。</p>

<p>ちなみに今回は MySQL-shared のパッケージが足りず、DBD::mysql がうまく入っていなかったためでした。。 local を丸ごと削除して再度 carton install で解決しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2011 (2日目) に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/10/16/6777"/>
    <updated>2011-10-16T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/10/16/yapcasia-tokyo-2011-2</id>
    <content type="html"><![CDATA[<p>昨日に引き続いて、 <a href="http://yapcasia.org/2011/" title="YAPC::Asia">YAPC::Asia</a> に参加してきました。</p>

<p>個人的な視点で、今回の YAPC から感じた Perl とそれを取り巻く Web サービス系の世界の現状をいくつかまとめると、</p>

<ul>
<li>前回参加した 2 年前に発表された PSGI はもはや標準</li>
<li>プラットフォーマーを中心に大規模サービスのノウハウが溜まってきている</li>
<li>アプリケーションの設計・実装でも、ミドルウェアやハードウェアも含めた視点がより大事になっている</li>
<li>組織が大きくなった会社では、開発者と運用者の良い関係づくり (DevOps の考え方) に取り組んでいる</li>
</ul>

<p>といったところかなと思います。 会社で標準的に使われている開発言語が違っても、根底の考え方や Web サービス系全般での動きは同じだなと痛感しました。</p>

<!--more-->

<hr>

<h2 id="toc_289">続 Unix Programming with Perl</h2>

<p>※講演資料 <a href="http://www.slideshare.net/kazuho/unix-programming-with-perl-2">[No Title]</a> DeNA の kazuho (<a href="http://twitter.com/kazuho">@kazuho</a>) さんの講演。<a href="http://www.slideshare.net/kazuho/unix-programming-with-perl">前回</a>に引き続いて、Unix 環境で正しく動くコードを作るための Tips 紹介のトークでした。Unix の知識が足りずまだ理解が追いついていないので、調べて試さないとと感じた発表でした。</p>

<h3 id="toc_290">正しいコードを書くために</h3>

<ul>
<li>テストだけでは足りない</li>
<li>常に正しく動くコードを書くためには知識が必要 &#8211; Perl の知識 &#8211; OS の知識</li>
</ul>

<h3 id="toc_291">IPC::Open3 によるプロセス間通信</h3>

<ul>
<li>pipe したときにブロックしてしまうケースがある &#8211; 子プロセスが STDIN 待ちになる場合 &#8211; 子プロセスが大量のエラーを吐く場合 &#8212; pipe が制限を持っている &#8212;- MacOSX : 16 Kbyte &#8212;- Linux2.6 : 64 Kbyte</li>
<li>deadlock とならないためには？ &#8211; クローズしてもうまくいかない &#8211; 標準出力全部読んでもうまくいかない &#8211; IPC::Open3 のオプションとして、標準エラー出力に undef いれる &#8211; pipe を使わず temporary file 使えばいい</li>
</ul>

<h3 id="toc_292">Unix signals と race condition (競合状態)</h3>

<ul>
<li>POSIX::pselect &#8211; pselect の外で SIGHUP &#8212; 多くのディストーションでの実装がバグっているため、実際には解決しない &#8211; eval &amp; die &#8212; これでもうまく解決しない &#8211; call syswrite on signal</li>
</ul>

<h2 id="toc_293">まとめ</h2>

<ul>
<li>buffesize は無限大ではない</li>
<li>shell invocation は危険なので system か IPC::Open3 を使う</li>
<li>Unix signals のハンドリングでは競合に気をつける</li>
</ul>

<hr>

<h2 id="toc_294">運用しやすいWebアプリケーションの構築方法</h2>

<p>※講演資料 <a href="http://www.slideshare.net/kazeburo/yapcasia2011">[No Title]</a> Livedoor の kazeburo (<a href="http://twitter.com/kazeburo">@kazeburo</a>) さんの講演。これまでの運用経験を基に、運用しやすい Web アプリケーションとなるためのログや DBI / cache の使い方・Tips をまとめて紹介されていました。確かに、と思うポイントが多く、とても参考になるトークでした。</p>

<h3 id="toc_295">運用しやすいとは？</h3>

<ul>
<li>耐障害性を考慮に入れた設計</li>
<li>アプリケーションからの情報発信</li>
<li>処理単位の明確化</li>
</ul>

<h3 id="toc_296">ログ</h3>

<ul>
<li>「アプリからの情報発信」 &#8211; 障害発生の際に最初に見る &#8211; 障害の検知、原因の特定</li>
<li>適切なログに含まれる情報 &#8211; 時間 &#8211; ログレベル &#8212; 基準を決めて &#8220;DEBUG&#8221;/&#8221;INFO&#8221;/&#8221;WARN&#8221;/&#8221;ERROR&#8221; を使い分ける &#8211; 環境 &#8212; pid や uid、引数など &#8211; caller / stacktrace &#8211; 読み取る人に伝わるメッセージ</li>
<li>Log::Minimal &#8211; 上記の適切なログ基準に沿ってログを出せるようにした &#8211; シリアライズ / カラーリング なども可能</li>
</ul>

<h3 id="toc_297">DBI (SQL)</h3>

<h4 id="toc_298">DB 負荷が急上昇するケース</h4>

<ul>
<li>原因クエリ探す</li>
<li>なんのクエリかアプリで確認</li>
<li>ORM を使っていると調べにくいこともある &#8211; SQL とコードが一致しなく鳴るため、SQL 生成を避けたい</li>
<li>DBIx::Sunny &#8211; caller 情報を SQL に埋込みクエリコメントにできる &#8211; SQL::Maker と組み合わせて利用できる</li>
</ul>

<h4 id="toc_299">接続が滞留するケース</h4>

<ul>
<li>最大接続数に達して接続エラー &#8211; メンテナンス時に timeout まで待つ &#8211; SHOW INNODB STATUS が見れない</li>
<li>接続滞留対策 &#8211; Scope::Container &#8212; DB 接続部の処理単位を短く、わかりやすく &#8211; Scope::Container::DBI &#8212; 上記を簡単に実現するために便利機能を追加したモジュール</li>
</ul>

<h3 id="toc_300">cache / memcached</h3>

<ul>
<li>課題 &#8211; Session::Store::Memcached &#8212; 簡単で高速、Expires 処理も自動化できる &#8212; 一方でストレージ永続性がないのは困ることもある &#8211; 特定キャッシュへの集中 &#8212; 分散アルゴリズム上でも特定サーバに集中してしまうことがある &#8211; cache thundering herd problem &#8212; memcache 上で exipre した瞬間に DB にアクセスが集中してしまう</li>
<li>Cache::Memcached::IronPlate &#8211; 冗長して保存することで cache の冗長性確保 &#8211; cache の負荷分散も行える</li>
<li>Cache::Isorator &#8211; ゆっくり expire させることができる</li>
</ul>

<h3 id="toc_301">Metrics</h3>

<ul>
<li>プロセスのステータスを取得できるようにしてグラフ化する &#8211; Plack::Middleware::ServerStatus::Lite &#8211; Parallel::Scoreboard</li>
</ul>

<h3 id="toc_302">まとめ</h3>

<ul>
<li>耐障害性を考慮に入れた設計 &#8211; cache &#8211; memcached</li>
<li>アプリケーションからの情報発信 &#8211; DBI &#8211; ログ &#8211; Metrics</li>
<li>処理単位の明確化 &#8211; DBI connection</li>
</ul>

<hr>

<h2 id="toc_303">watch your log</h2>

<p>DeNA の nekokak (<a href="http://twitter.com/nekokak">@nekokak</a>) さんの講演。社内 DevOps の観点から基準を決めてログ出力し、それを監視するためのツールを作成したというお話。&#8221;DevOps&#8221; と &#8220;ログ監視&#8221; については各社でかなり試行錯誤しているところかもしれません。 ログ監視は最近色々考えていて自分で実装しようかなと思っているところだったので、Komainu も試してみます。あと、「必要に応じたエンジニアリング」というスタンスはいいなと思います。</p>

<h3 id="toc_304">DevOps</h3>

<ul>
<li>Dev と Ops 相互に協力する事が必要 &#8211; 自社 Dev は運用を考えられなければならない &#8211; 自社 Ops は Dev から渡される運用を丸受けしてはダメ</li>
<li>Dev Ops の垣根取り払って密なコミュニケーションを</li>
<li>運用を考えられる Dev &#8211; 障害は一次対応が Ops のことが多い &#8211; 運用したことないミドルウェアを導入する場合は、事前に互いに調べて共有 &#8211; 仕様変更 / 新機能のリリースタイミングで共有を行う</li>
<li>丸受けしない Ops &#8211; サービス仕様・アーキテクチャを理解 &#8211; 障害発生時に何を対応する必要があるか理解 &#8211; 必要な情報は Dev に提出 &#8211; 「お母さん役みたいなもの」</li>
</ul>

<h3 id="toc_305">コミュニケーション濃度の問題</h3>

<ul>
<li>お互いしっかりコミュニケーション取る</li>
<li>コミュニケーションもレベル・粒度ある</li>
<li>「お互い言い分あるだろうが gdgd 言う前に行動しろ」</li>
</ul>

<h3 id="toc_306">障害そして監視</h3>

<ul>
<li>障害検知の仕組みとして監視必要 &#8211; 死活監視 &#8211; リソース監視 &#8211; ログ監視</li>
</ul>

<h3 id="toc_307">ログ</h3>

<ul>
<li>お互いで取り決めたフォーマットに沿ったログ出力 &#8211; Dev と Ops が面倒みるにあたって取り決めるといい</li>
<li>accesslog / errorlog &#8211; 監視する項目の取り決めをしておく &#8211; ステータスコード監視でサービスがどのような状況か分かる</li>
<li>applog (syslog) &#8211; フォーマットの取り決めが重要なところ &#8211; 障害レベルの分類をログレベルで出力するなどの取り決め &#8212; 携帯にメールか、会社のメールかでレベルか</li>
<li>mysql slow log &#8211; だいたいボトルネックは DB のことが多い</li>
<li>ログ収集方法 &#8211; ログを良い感じで監視できるソリューションがない</li>
</ul>

<h3 id="toc_308">Komainu</h3>

<ul>
<li>設定に応じて集計 &#8211; accesslog 集計 &#8211; applog 集計 &#8211; mysql slow log 集計</li>
<li>アーキテクチャ &#8211; fork model &#8211; notify は IRC と Email &#8211; データは database に保存 &#8212; サマリ集計し、前回からどれくらい増えたか知りたい &#8212; グラフ化する &#8212; プロセス間通信せずにデータを受け渡す</li>
<li>何が重要か &#8211; サービスクオリティ維持のため &#8211; 利用者からの問い合わせベースで障害に気づくのは情けない &#8211; 攻めの運用 &#8211; ログ情報を通知することでエラーに向きあう</li>
</ul>

<h3 id="toc_309"><strong>Shut the fuck up and write some code</strong></h3>

<ul>
<li>行動こそすべて</li>
<li>誰かが始めないと何も始まらない</li>
<li>問題意識を持った人が率先して行動 &#8211; コードの良し悪しなどはどうでもいい</li>
</ul>

<hr>

<h2 id="toc_310">Managing A Band Of Hackers</h2>

<p>DeNA の hidek (<a href="http://twitter.com/hidek">@hidek</a>) さんの基調講演。Perl ハッカーを束ねるマネージャーとしての考え方や経験のお話でした。 とてもいい話でした。DeNA には優秀で著名な方が集まっているイメージがありますが、このようなコミュニティというか、仲間の魅力が根底にはあるのだろうなと感じる内容でした。途中、何度もチームを褒めているところが、率直に褒めているように感じられて印象的でした。</p>

<h3 id="toc_311">management</h3>

<ul>
<li>なぜマネージャーが必要？ &#8211; 一人では規模の限界</li>
<li>集団で物事を作るということ &#8211; バラバラに動くと個人個人のプレーになってしまう &#8211; 誰かが指揮する &#8211; これがマネージャー</li>
<li>&#8220;The whole is more than the sum of its parts.&#8221; &#8211; 1 + 1 が 2 以上になるようにしなければならない</li>
</ul>

<h3 id="toc_312">tasks of the manager</h3>

<ul>
<li>マネージャーの業務にはエンジニアとしての経験が必要 &#8211; 大規模なほど広いレイヤの知識が必要</li>
</ul>

<h4 id="toc_313">project management</h4>

<ul>
<li>プロダクトのライフサイクルを維持する &#8211; エンジニアリング未経験だと無理</li>
<li>計画を立てる</li>
<li>開発中の進捗・マイルストーン管理</li>
</ul>

<h4 id="toc_314">personal matters</h4>

<ul>
<li>人事も大事</li>
<li>採用面接 &#8211; 見極める力が求められる</li>
<li>配属 &#8211; 仕事を与えるということ &#8211; その人の持ってる力などを見極めることが大切 &#8211; コミュニケーション能力も必要 &#8212; その人が何をしたいのかを聞く</li>
<li>評価 &#8211; どんな仕事をしたか、を見るためにもエンジニア経験が必要</li>
</ul>

<h4 id="toc_315">etc</h4>

<ul>
<li>事務仕事</li>
<li>会議 &#8211; 無駄なものもあるが、最近必要と感じることもある &#8212; 海外支社とのテレビ会議など、図を書いたりすることで理解が早くなる &#8211; Face to Face も重要</li>
</ul>

<h3 id="toc_316">the manager of hackers</h3>

<ul>
<li>少しとんがった人たちのマネージャーとして</li>
<li>Platform System Group &#8211; プロジェクト開始時は 3 名、現在 20 名 &#8211; CPAN Author が 6 名</li>
</ul>

<h4 id="toc_317">hackers はどういう人達か</h4>

<ul>
<li>&#8220;no man is an island&#8221; &#8211; 一人だと寂しくて死んじゃう</li>
<li>get bored easily &#8211; 飽きっぽい &#8211; 餌を与え続ける</li>
<li>priority &lt; interest &#8211; つまらない仕事を与えつつも、先に楽しい仕事を用意しておく</li>
<li>late morning, late nite &#8211; 働いている時間は一緒 &#8211; 裁量労働なので良いが、相談したいときにいつ来るかわからないのは困ることも</li>
<li>KY &#8211; 読めない事自体は仕事に影響しないので、悪いことではない &#8211; 悪ノリする</li>
</ul>

<h3 id="toc_318">what should I do ?</h3>

<ul>
<li>これはハッカーのマネージャーだけでなく、一般でも通じるところはある</li>
</ul>

<h4 id="toc_319">delegation</h4>

<ul>
<li>仕事を任せる &#8211; 失敗もするけど、任せると成長する</li>
<li>自分でやっちゃおう、と思うこともある</li>
<li>「任せる」と「丸投げ」は違う &#8211; 任せるための準備はする &#8211; バックアッププランは作る &#8211; 失敗したらマネージャーが責任を持つ</li>
</ul>

<h4 id="toc_320">bad news first</h4>

<ul>
<li>悪い報告を先にするようにしてもらう</li>
</ul>

<h4 id="toc_321">TMTOWTDI</h4>

<ul>
<li>やり方は一つではない &#8211; これはマネジメントだけではない</li>
<li>多様性を許容する</li>
</ul>

<h3 id="toc_322">マネージャが少ない会社は大変</h3>

<ul>
<li>マネージャは優秀なエンジニアじゃないとできない &#8211; 選択肢として考えて欲しい</li>
</ul>

<h3 id="toc_323">コミュニティに参加して欲しい</h3>

<ul>
<li>技術的な刺激を受けられる</li>
<li>人脈を作る &#8211; マネージャとして重要 &#8211; 最終的には経験の糧になる</li>
</ul>

<hr>

<p>このほか、LT なども面白く刺激的なものが多く、とても良いカンファレンスでした。</p>

<p>次回がどのようになるかはまだ未定とのことでしたが、次回が YAPC::Asia どこで行われても参加したいと思っています。同時に、これまではカンファレンスやセミナーに参加しつつもずっと聞く側でしたが、今後は YAPC に限らず、もっとコミュニティ全般に対して積極的に貢献できる活動をしたいと思った 3 日間でした。</p>

<p>発表者、スタッフ、参加者、そしてスポンサー企業のみなさま、お疲れ様でした。</p>
]]></content>
  </entry>
  
</feed>
