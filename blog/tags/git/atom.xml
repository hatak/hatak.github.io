<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tag: git | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/tags/git/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T16:37:06+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[hatak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vcs_info でプロンプトにリポジトリ名を表示]]></title>
    <link href="http://blog.hatak.net/2012/06/15/14100"/>
    <updated>2012-06-15T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/06/15/vcs_info</id>
    <content type="html"><![CDATA[<p>最近特にターミナルでコードを書くことが増えてきたため、プロンプトでブランチ名であったりそのほかの情報も適宜だせるようにしたいなと設定を調べたり試したりしてみました。</p>

<p>以前までは、bash_completion を利用して表示するということをしていました。.bashrc の例ですが、こんな感じです。</p>
<div class="highlight"><pre><code class="bash"><span class="c"># custom prompt for .bashrc</span>
<span class="k">if</span> <span class="o">[</span> -r <span class="s2">&quot;/etc/bash_completion.d/git&quot;</span> <span class="o">]</span>;
    <span class="k">then </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;[u@h w]$(__git_ps1 &quot;</span><span class="o">(</span>e<span class="o">[</span>0;32m%se<span class="o">[</span>0m<span class="o">)</span><span class="s2">&quot;)$ &quot;</span>
<span class="k">fi</span>
</code></pre>
</div>

<p>これはこれで良いのですが、git でしか利用できません。メインで利用する VCS は git なので問題ありませんが、それ以外の VCS で管理されたコードを読んだりする機会も多々あります。 調べてみたところ、zsh に vcs_info という関数があることを知りました。そこで、これを使ってプロンプトを少し派手にしてみました。</p>

<!--more-->
<div class="highlight"><pre><code class="bash"><span class="c"># colors</span>
autoload colors;
colors

<span class="c"># vcs_info</span>
autoload -Uz vcs_info zstyle <span class="s1">&#39;:vcs_info:*&#39;</span>
formats <span class="s1">&#39;%f(%F{cyan}%s%f:%F{green}%b%f)&#39;</span>
zstyle <span class="s1">&#39;:vcs_info:*&#39;</span>
actionformats <span class="s1">&#39;%f(%F{cyan}%s%f:%F{green}%b%f|%F{red}%a%f)&#39;</span>
zstyle <span class="s1">&#39;:vcs_info:(svn|bzr):*&#39;</span>
branchformat <span class="s1">&#39;%F{green}%b%f:%F{yellow}r%r%f&#39;</span>
zstyle <span class="s2">&quot;:vcs_info:git:*&quot;</span>
check-for-changes <span class="nb">true </span>zstyle <span class="s2">&quot;:vcs_info:git:*&quot;</span>
stagedstr <span class="s1">&#39;+&#39;</span>
zstyle <span class="s2">&quot;:vcs_info:git:*&quot;</span>
unstagedstr <span class="s1">&#39;-&#39;</span>
zstyle <span class="s1">&#39;:vcs_info:git:*&#39;</span>
formats <span class="s1">&#39;%f(%F{green}%b%f%F{green}%c%F{red}%u%f)&#39;</span>
zstyle <span class="s1">&#39;:vcs_info:git:*&#39;</span>
actionformats <span class="s1">&#39;%f(%F{green}%b%f|%F{red}%a%f%F{green}%c%F{red}%u%f)&#39;</span>

<span class="k">function </span>_precmd_vcs_info <span class="o">()</span> <span class="o">{</span>
    <span class="nv">psvar</span><span class="o">=()</span>
    <span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
    vcs_info
    psvar<span class="o">[</span>1<span class="o">]=</span><span class="s2">&quot;$vcs_info_msg_0_&quot;</span>
<span class="o">}</span>

<span class="c"># add-zsh-hook autoload -Uz add-zsh-hook add-zsh-hook precmd _precmd_vcs_info</span>
<span class="c"># prompt setopt prompt_subst local PROMCOL=$&#39;%F{$[1+RANDOM%6]}&#39;</span>
<span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%(?.%F{green}^-^%f.%F{red}@_@%f) &#39;</span><span class="nv">$PROMCOL</span><span class="s1">&#39;%l${WINDOW:+&quot;:$WINDOW&quot;}:%h%F{green}$psvar[1]%f%(!.#.$)&#39;</span>
</code></pre>
</div>

<ul>
<li>2行目 : 色指定を簡単に行えるようにするため、colors をロードします</li>
<li>5行目 : 今回のテーマである vcs_info をロードします</li>
<li>6-7行目 : 対応する VCS 共通の表示フォーマットを定義します : formats: 通常表示されるフォーマット : actionformats: コンフリクト時などに表示されるフォーマット</li>
<li>8行目 : svn と bzr の時にはリビジョン番号表示をしたいので、フォーマットを定義します</li>
<li>9-13行目 : git の場合の各種設定や専用フォーマットの定義を行っています : check-for-changes: ローカルでの変更があるかチェックをします : staged: &quot;git status&quot; 実行時の &quot;Changes to be committed&quot; があるときには &quot;+&quot; を表示します : unstaged: &quot;git status&quot; 実行時の &quot;Changes not staged for commit&quot; があるときには &quot;-&quot; を表示します</li>
<li>27行目 : プロンプトの表示色をランダムでカラーにします</li>
<li>28行目 : 顔文字はコマンド成否で変化します（<a href="http://smokycat.info/zsh/231">ネタ元</a>）</li>
</ul>

<p>はじめは %1v として <code>$psvar[1]</code> の値をとっていたのですが、カラースキーマがうまくいかないため配列の要素を直指定する形にしています。vcs 管理下にないディレクトリでは <code>$psvar[1]</code> の値は何も入らないため、デザインも崩れません。</p>

<p><img src="https://dl.dropboxusercontent.com/u/14531906/hatak.github.io/2012/06/2012-06-15-2.27.57.png" alt="ターミナルの例" /></p>

<h3 id="toc_174">参考</h3>

<ul>
<li>  <a href="http://d.hatena.ne.jp/holidays-l/20100323/p1">zsh の vcs_info が神！のごとく重かったのですが… : ヒルズで働くholidays-lの技ログ</a></li>
<li>  <a href="http://smokycat.info/zsh/231">zsh 前のコマンドの成否をプロンプトの顔文字で通知 | smokycat.info</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github 上のプロジェクトの fork をプライベートな git サーバで管理]]></title>
    <link href="http://blog.hatak.net/2011/05/31/2165"/>
    <updated>2011-05-31T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/05/31/github</id>
    <content type="html"><![CDATA[<p>github で管理されている OSS を利用するとき、少しカスタムして使いたいという場合があったりします。もちろん、fork すれば github 上で自分が push できる状態にはなりますが、カスタムしたバージョンを利用する範囲が社内だったりすると github 以外で管理したくなったりもします。</p>

<p>そこで、こんな感じの構成を目指して、github 上のプロジェクトの fork をプライベートな git サーバで管理してみました。</p>

<p>|プライベートなリモートリポジトリのメインブランチ|origin/master| |github のプロジェクトのメインブランチ|github/upstream|</p>

<!--more-->

<p>事前準備として、プライベート git サーバには push できる空のリポジトリを作っておきます。 (gitosis の場合であれば、gitosis.conf にリポジトリ名を追加しておく感じでいけます)</p>

<p>まず、おおもとのツリーを github から clone して取得します。</p>
<div class="highlight"><pre><code class="text">$ git clone --origin github https://github.com/edavis10/redmine.git
$ cd redmine
$ git config -l
...
remote.github.fetch=+refs/heads/*:refs/remotes/github/*
remote.github.url=https://github.com/edavis10/redmine.git
branch.master.remote=github
branch.master.merge=refs/heads/master
</code></pre>
</div>

<p>ここでは master が github のメインブランチになっています。 今回はオリジナルの master を upstream という名前で扱うようにしたいので、ブランチ名を変更します。</p>
<div class="highlight"><pre><code class="text">$ git branch master
$ git branch -m master upstream
$ git branch upstream
$ git config -l
...
remote.github.fetch=+refs/heads/*:refs/remotes/github/*
remote.github.url=https://github.com/edavis10/redmine.git
branch.upstream.remote=github
branch.upstream.merge=refs/heads/master
</code></pre>
</div>

<p>これでおおもとの master は、ローカルでは github/upstream という名前で扱えるようになりました。 実際にこちらでカスタマイズするのは github/upstream のタグ &#8220;1.2.0&#8243; をベースに使いたいので、ここから master ブランチを切ります。</p>
<div class="highlight"><pre><code class="text">$ git branch master 1.2.0
$ git branch master upstream
</code></pre>
</div>

<p>そして、プライベートな git サーバをリモートリポジトリ &#8220;origin&#8221; として追加します。</p>
<div class="highlight"><pre><code class="text">$ git remote add origin ssh://gitosis@git.example.jp/redmine.git
$ git config branch.master.remote origin
$ git config branch.master.merge refs/heads/master
$ git config -l
...
remote.github.fetch=+refs/heads/*:refs/remotes/github/*
remote.github.url=https://github.com/edavis10/redmine.git
branch.upstream.remote=github
branch.upstream.merge=refs/heads/master
remote.origin.url=ssh://gitosis@git.example.jp/redmine.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
</code></pre>
</div>

<p>あとはプライベートリポジトリに push すれば完了です。</p>
<div class="highlight"><pre><code class="text">$ git push origin master
$ git push origin upstream
</code></pre>
</div>

<p>これで、origin/master に push/pull し放題になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitosis で作るプライベートな git サーバ]]></title>
    <link href="http://blog.hatak.net/2011/05/18/571"/>
    <updated>2011-05-18T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/05/18/gitosis</id>
    <content type="html"><![CDATA[<p>業務で使い始めた Git ですが、高機能過ぎて未だに使いこなせている自信がありません。 一方で、かつて利用していた Subversion はコマンドを忘れてしまって使うたびにググるほどに記憶が抜けつつあります。</p>

<p>そんな Git を複数メンバー・複数環境で利用する場合、マスターリポジトリを利用することがあります。これにより、Subversion のような中央集約型のソースコード管理をしつつも Git の恩恵を受ける開発スタイルを取ることができるます。 マスターリポジトリとして <a href="http://github.com/">GitHub</a> を利用するのが最も手っ取り早いですが、プライベート（= メンバーのみが閲覧できる）なリポジトリを作成するためには有料オプションにしなければなりません。しかも地味に高い。</p>

<p>こんな時、gitosis を利用すると手軽にプライベートな Git サーバを構築することができます。もちろん、リポジトリを利用するメンバー全員が SSH での接続ができるサーバに bare リポジトリを作ることでも Git サーバとして機能しますが、それでも gitosis を使う優位性は以下のような点にあります。</p>

<ul>
<li>公開鍵認証を用い、通信にSSHを利用するため安全に利用できる</li>
<li>公開鍵でユーザを識別し、リポジトリに対するアクセス制御が設定できる</li>
<li>サーバにアカウントとは切り離して、リポジトリへのアクセスアカウントの作成ができる</li>
</ul>

<p>gitosis はマスターリポジトリとして利用するサーバのみインストールします。リモートから clone / pull / push をするクライアントには、通常通りの Git がインストールされていれば利用することができます。</p>

<!--more-->

<h2 id="toc_175">パッケージ導入</h2>

<p>gitosis は python で記述され、gitで管理されているプロジェクトです。 CentOS の場合、EPEL リポジトリに Git / gitosis 共にパッケージが存在するので、これを利用することで簡単にインストールできます。</p>
<div class="highlight"><pre><code class="text">$ sudo yum install git python-setuptools gitosis
</code></pre>
</div>

<p>この方法で導入した場合、gitosis ユーザが合わせて作成されます。</p>

<ul>
<li>uid: gitosis</li>
<li>home dir: /var/lib/gitosis</li>
</ul>

<h2 id="toc_176">初期設定</h2>

<p>gitosis の設定は、 gitosis 管理リポジトリのファイルを変更し push することで反映されます。 設定を行うためには、管理ユーザとして最低一人の公開鍵をセットしなければなりません。ここでは、Git サーバ上の現在の操作ユーザの鍵を管理ユーザとしてセットする例を示します。</p>
<div class="highlight"><pre><code class="text">$ cd /var/lib/gitosis
$ sudo -H -u gitosis gitosis-init &lt; ~/.ssh/id_rsa.pub
</code></pre>
</div>

<p>これで、gitosis のホームに &quot;gitosis&quot; ,&quot;repositories&quot; という2つのディレクトリが生成されます。<br>
この gitosis 管理リポジトリを、登録した鍵を持つクライアント（ここでは同一ホスト）からcloneし、設定します。</p>
<div class="highlight"><pre><code class="text">$ cd ~/work
$ git clone gitosis@localhost:gitosis-admin.git
</code></pre>
</div>

<p>設定を変更後、push することで Hooks のスクリプトが実行されることで key が gitosis ユーザの authorized_keys に追記されていきます。 この authorized_keys には command が併記されているため、git のリモートリポジトリを操作する以外のコマンドが実行できないようになっているのです。</p>

<h3 id="toc_177">新規ユーザの追加</h3>

<p>新規ユーザの追加は、*.pub ファイルを作成して該当するグループに追記、push するだけです。 gitosis では、グループ毎に権限をコントロールする形式を取ります。このため、ユーザが複数のグループに所属しているとうまく動作しないことがあります。 *.pub は単なる authorized_keys なので、1行にひとつの公開鍵を書く形式になっていれば複数設定可能です。</p>

<h3 id="toc_178">新規リポジトリの追加</h3>

<p>新規リポジトリの追加は、gitosis.conf に変更を加えて push するだけです。空のまま pull すると init されるだけですが、追加して push すれば大丈夫です。</p>

<h2 id="toc_179">設定のコツ</h2>

<p>keydir 以下に公開鍵ごとにファイルを作成し、 gitosis.conf に公開鍵のファイル名 (.pub を除く) を設定していきます。</p>
<div class="highlight"><pre><code class="text">[gitosis]

[group gitosis-admin]
writable = gitosis-admin
members = admin

[group development]
writable = misc/sandbox project test
members = hatak hoge fuga
</code></pre>
</div>

<h3 id="toc_180">サブディレクトリ</h3>

<p>リポジトリはサブディレクトリに入れることができます。 上記 sandbox の場合は次のようになります。</p>

<ul>
<li>Clone 用 URL : ssh://gitosis@localhost/misc/sandbox.git</li>
<li>サーバ内ファイルシステム: /var/lib/gitosis/repositories/misc/sandbox.git</li>
</ul>

<p>サブディレクトリは予め作成しておく必要がありますが、こうすることで乱立するリポジトリを階層分けして整理することができます。</p>
<div class="highlight"><pre><code class="text">$ sudo -H -u gitosis mkdir /var/lib/gitosis/repositories/misc
</code></pre>
</div>

<h3 id="toc_181">config の改行</h3>

<p>gitosis.conf ではユーザが多いときなどバックスラッシュを入れることで、設定ファイル内でも改行することができます。 ユーザが多いときなどに可読性を上げることができ、とても便利です。</p>

<h2 id="toc_182">関連するページ</h2>

<ul>
<li><a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way">Hosting Git repositories, The Easy (and Secure) Way</a></li>
<li><a href="http://labs.gree.jp/blog/2011/03/2885/">多人数開発で Git を使う場合の環境構築 | GREE Engineers&#39; Blog</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
