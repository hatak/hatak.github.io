<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tag: seminar | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/tags/seminar/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T16:37:06+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[hatak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL Casual Talks Vol.3 で話してきた]]></title>
    <link href="http://blog.hatak.net/2012/04/20/12428"/>
    <updated>2012-04-20T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/04/20/mysql-casual-talks</id>
    <content type="html"><![CDATA[<p>4/19 にオラクルセンター青山で <a href="http://atnd.org/events/26373" title="MySQL Casual Talks Vol.3">MySQL Casual Talks Vol.3</a> が開催されました。 今回は <a href="http://twitter.com/myfinder" title="@myfinder">@myfinder</a> さんにお声がけいただきトーク枠をいただけたので、挑戦させていただきました。</p>

<p><a href="http://www.slideshare.net/idhatak/mysql-casual">http://www.slideshare.net/idhatak/mysql-casual</a>">http://www.slideshare.net/idhatak/mysql-casual">http://www.slideshare.net/idhatak/mysql-casual</a></a></p>

<!--more-->

<p>小さな話をいっぱい寄せ集めた内容だったので、うまくまとめきれずすみませんでした。また、時間を気にしてしまって少し早口だったり聞き取りにくかったりした所もあったかと思います。</p>

<p>伝えたかった思いはまとめに集約しています。 何よりも「**MySQL すごいよ、ありがとう**」と言いたかったのでした。MySQL 自体のソフトウェアとしての完成度や開発体制もさることながら、多くのユーザがいて様々な知見・ノウハウが共有されているこの環境自体も大きな資産であると感じています。ない分の動きを把握していて、様々手を加えられるのはとても理想的なことですし憧れます。ですが、そこまでのスキルセットがない人でも、調べたり試したりすることである程度がんばれる、というのが環境含めて完成されている証だと思っています。 また、これは MySQL に限った話ではないのですが、私自身の考えとして実際のサービス運用では様々な視点・知識・経験が必要だと思っています。「何でも屋になろう」ということではなく、「視点を変えてみるとうまくいくんじゃないかな」「そのためには薄くでも知識や経験があると取っつきやすいんじゃないかな」という考えです。サービスを運用していく以上は、使っていただいているユーザさんを「もてなす」心を意識して、そのためにどうすればいいかを考えてメンバーと協力して作り上げていきたいと思っています。</p>

<p>偉そうなことを言いながらも最近は直接のインフラ運用をしていないことも多いのですが、全体としては業務に限らない私自身の経験や思いをまとめたものとさせていただきました。 このような公の場でトークさせていただくのは初めてだったのですが、資料を作る時点で様々追って調べたりまとめたりと、かなり良い勉強となりました。アウトプット大事ですね。 いつもお世話になっているコミュニティに対して、今までは情報を集めて使うだけの立場だったのですが、少しずつ発信・共有する立場にもなりたいというのが今年の目標でした。まだ内容的にも未熟な点が多いと思いますが、人に説明できるまで理解をする（＝自分の言葉でかみ砕く）を重ねていってコミュニティを支えたい・恩返しをしたいと強く思った一日でした。</p>

<p>快適な会場を提供いただいた Oracle のみなさま、とりまとめていただいた運営のみなさま、そしてお集まりいただいて素敵な時間を共有していただいた参加者のみなさま、ありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サイバーエージェント×クックパッド合同勉強会に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/05/26/1786"/>
    <updated>2011-05-26T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/05/26/capad</id>
    <content type="html"><![CDATA[<p>クックパッドさんのオフィスで開催された「<a href="http://techlife.cookpad.com/2011/05/16/amepad/">サイバーエージェント×クックパッド合同勉強会</a>」に参加してきました。 両社で検証や本番導入しているクラウドサービスな話題がメインで、とても興味深いものでした。</p>

<!--more-->

<h2 id="toc_54">OpenStackを検証してみた - オープンソースの仮想化技術 open stack の検証結果の報告</h2>

<p>サイバーエージェントの坂本佳久 (<a href="http://twitter.com/ton_katsu">@ton_katsu</a>) さんの発表。プライベートクラウドを構築するプロジェクトのひとつ、OpenStack を検証した結果のまとめ。</p>

<h3 id="toc_55">OpenStack</h3>

<p>Nova と Swift を組み合わせたプロジェクト。 OpenStack を検証対象として選んだ理由は次のとおり。</p>

<ul>
<li>Eucalypusだとスケールしない (らしい)</li>
<li>ubuntu がサポートする (らしい)</li>
<li>200 人体制で開発が行われている</li>
<li>参加企業として 60 社</li>
<li>KVM, QEmu, Xen など広く対応している</li>
<li>Pythonベースで書かれている</li>
</ul>

<p>AWS と比較すると、下記のような対比でだいたい同じことができる。</p>

<ul>
<li>Amazon EC2

<ul>
<li>Nova</li>
</ul></li>
<li>Amazon S3

<ul>
<li>Glance</li>
<li>OSイメージ登録</li>
<li>Swift</li>
<li>ストレージ</li>
</ul></li>
</ul>

<h3 id="toc_56">システム構成の例</h3>

<p>インスタンスの起動や管理を行う &quot;CloudController&quot; と、この配下に複数の &quot;Computenode&quot; を配置する構成をとる (最小構成では両プロセスを同じマシンに同居させることも可能)。Computenode に hypervisor などをいれ、実際にインスタンスを動作させることとなる。その他、副次的に MySQL や RabbitMQ などのプロセスも利用する。</p>

<h3 id="toc_57">使ってみた</h3>

<p>実際に検証で用いた環境は下記の通り。</p>

<ul>
<li>OpenStack Cactus</li>
<li>Controller

<ul>
<li>ubuntu 10.04</li>
</ul></li>
<li>Computenode

<ul>
<li>ubuntu 10.04 x3</li>
</ul></li>
<li>virtual

<ul>
<li>KVM ベースで CentOS / ubuntu</li>
</ul></li>
</ul>

<p>これらの管理を行うために、 Django ベースの GUI が付属している。WebSocket を利用するため、Safari などで操作する必要がある (Chrome はうまく動作しなかったとのこと)。また、VNC コンソールは Cactus のバージョンでは未実装なので、利用する場合は trunk から取得する必要がある。<br>
その他、API も用意されているので自前で管理ツールを作成することも可能。</p>

<h3 id="toc_58">感想</h3>

<ul>
<li>良かった点

<ul>
<li>ubuntu ではパッケージで提供されているためインストールが簡単</li>
<li>シンプル</li>
<li>Python のためエラーが追いやすい</li>
</ul></li>
<li>苦労した点

<ul>
<li>インスタンスメタデータをどこに取り行けばいいかわからなかった。。</li>
<li>ハイブリッドクラウドがいいかも</li>
</ul></li>
</ul>

<p>来月より検証環境で運用するとのことで、今後のレポートにも注目したいところです。</p>

<h2 id="toc_59">AmebaPico を支える技術 - AWS上に構築された AmebaPico で使用されている技術・開発体制について</h2>

<p>サイバーエージェントの森野耕平 (<a href="http://twitter.com/kohei_april20">@kohei_april20</a>) さんの発表。AmebaPico のアーキテクチャや体制に関して。</p>

<h3 id="toc_60">Ameba Pico</h3>

<p>アメーバピグの海外版として位置づけられているサービス。</p>

<ul>
<li>プラットフォーム

<ul>
<li>facebook</li>
<li>mochimedia</li>
<li>独自 (自前)</li>
</ul></li>
<li>利用ユーザ

<ul>
<li>390万UU、60万MAU</li>
<li>10-20代が中心、男女比 3:7</li>
<li>インドネシア、フィリピン、アメリカが中心</li>
</ul></li>
</ul>

<h3 id="toc_61">アーキテクチャ</h3>

<p>すべて AWS で運用されている。</p>

<ul>
<li>application

<ul>
<li>Tomcat</li>
</ul></li>
<li>socket server

<ul>
<li>ノンブロッキング I/O を使い、軽量データ処理を行う</li>
<li>独自のバイナリプロトコルで細かい大量のコマンドを処理</li>
<li>コマンドとしてのデータをバイナリとしてシリアライズ</li>
<li>イベント駆動でリアルタイム性</li>
</ul></li>
<li>static

<ul>
<li>CDN</li>
<li>Storage</li>
</ul></li>
<li>ZooKeeper

<ul>
<li>システム全体でのロック管理を行う分散ロックシステム</li>
</ul></li>
<li>memcached</li>
<li>MongoDB

<ul>
<li>3台構成のレプリカセットを構築</li>
<li>うち1台は EBS</li>
<li>6シャードで分散</li>
</ul></li>
<li>ElasticMapReduce

<ul>
<li>ログ集計</li>
</ul></li>
<li>pigg と共用の箇所

<ul>
<li>ID管理サーバ</li>
<li>ポイント (サービス内通貨) 管理サーバ</li>
</ul></li>
</ul>

<h3 id="toc_62">AWS の利用</h3>

<ul>
<li>S3

<ul>
<li>static な配信コンテンツを保持</li>
<li>ユーザ行動ログ</li>
</ul></li>
<li>CDN

<ul>
<li>cloudfront を利用</li>
</ul></li>
<li>ElasticMapReduce

<ul>
<li>S3 に保存されたログを解析</li>
</ul></li>
<li>EC2

<ul>
<li>汎用的なサーバインスタンスとして利用</li>
<li>用途に応じて種別を使い分け</li>
<li>small</li>
<li>開発環境</li>
<li>High-CPU</li>
<li>webサーバ</li>
</ul></li>
<li>EBS

<ul>
<li>バックアップなど揮発性があって困る箇所にマウント</li>
</ul></li>
</ul>

<h2 id="toc_63">Flash の利用</h2>

<p>クライアントサイドではまず main.swf のみをロードし、必要に応じてサブモジュールをロードする。</p>

<ul>
<li>shop.swf</li>
<li>room.swf</li>
<li>profile.swf delegate 実装でサーバ接続とモック用を切り分けることで、サーバサイドとクライアントサイド別々の開発が行えるようにしている。</li>
</ul>

<h2 id="toc_64">運用してみて</h2>

<p>EC2 上でサービスを運用してみての総括。</p>

<ul>
<li>良かった点は「手軽さ」

<ul>
<li>DC 借りる必要ないことで海外展開のハードルが下がる</li>
<li>インフラメンバーがいなくても進められた (スモールスタート)</li>
</ul></li>
<li>課題は「重い」こと

<ul>
<li>たまに落ちる</li>
<li>バージニアだからかもしれない？</li>
<li>バージニアで運用中のインスタンスが 60個くらい

<ul>
<li>平均すると 2-3ヶ月に1つ落ちる</li>
<li>最高で4週に4つ落ちたことがある</li>
</ul></li>
<li>メンテナンスの告知が事前に来ることもある</li>
<li>こないこともある</li>
<li>インスタンスが落ちるとどうなるか</li>
<li>応答がなくなる

<ul>
<li>特定ポートだけの場合もある</li>
<li>全体の場合は何も出来ない</li>
</ul></li>
<li>リブートするしかない</li>
<li>落ちなくても、一定時間応答なくなることもある</li>
<li>サービスとして利用する場合</li>
<li>落ちやすいが冗長重視で組めば使える</li>
</ul></li>
</ul>

<p>そして、MongoDB をメインで利用してみての総括。</p>

<ul>
<li>実績

<ul>
<li>処理クエリは 5,000 Read/s (Max)</li>
</ul></li>
<li>問題

<ul>
<li>コネクションプールが枯渇</li>
<li>MongoDB の I/O がボトルネックとなってしまう</li>
<li>シャードを 4→6 に増設することで対処</li>
<li>合わせて I/O パフォーマンスの高いインスタンスを利用するように</li>
<li>オートバランシングの挙動</li>
<li>バランシングに偏りが生じてしまう

<ul>
<li>新規シャード追加時などに特に顕著となる</li>
</ul></li>
<li>現在はオートバランシングを off にして手動で調整</li>
<li>レプリカセットのコンフィグ情報が未反映となるケース</li>
<li>一見正常に動いてるので気付かなかった

<ul>
<li>プライマリ落ちたときにスレーブがうまく動かずに発覚</li>
</ul></li>
<li>コンフィグの反映は全台再起動が必要</li>
</ul></li>
</ul>

<p>MongoDB を大規模に利用しているケースなので、とても興味深いものでした。海外展開の際に DC の場所を気にしなくても良い、というのは AWS ならではのメリットに感じました。</p>

<h2 id="toc_65">毎日の料理を楽しくする画像配信技術</h2>

<p>クックパッドの成田一生 (<a href="http://twitter.com/mirakui">@mirakui</a>) さんの発表。レシピに必須の画像をリアルタイムでリサイズするための Apache モジュール &quot;TOFU&quot; について。</p>

<h3 id="toc_66">従来の画像アップロードの仕組み</h3>

<ul>
<li>アップロードされた画像はアプリケーションサーバがリサイズ

<ul>
<li>サムネイルを NFS に保存</li>
</ul></li>
<li>いくつかの問題点

<ul>
<li>新デザインのプロトタイプで様々な画像サイズを試すことが難しい</li>
<li>デザインに合わせて画像サイズを柔軟に変えたい</li>
<li>試すたびに 800 万枚リサイズ

<ul>
<li>昔はやってた (!)</li>
</ul></li>
<li>デバイス展開の度にデザイン変わるためリサイズが必要

<ul>
<li>サービス出る速度が遅くなる</li>
<li>モチベーションが低下する</li>
</ul></li>
</ul></li>
</ul>

<h3 id="toc_67">そこで新しい方法を模索</h3>

<ul>
<li>現在の規模

<ul>
<li>投稿画像の枚数</li>
<li>800万枚</li>
<li>画像リクエスト</li>
<li>7,000枚/sec</li>
<li>ストレージに NFS を利用</li>
<li>NFS が落ちると全サービスが落ちる</li>
</ul></li>
<li>EC2 への移行を検討中

<ul>
<li>ストレージは S3 にしたい</li>
</ul></li>
</ul>

<h3 id="toc_68">TOFU</h3>

<p>URL に処理内容をマッピングし、リクエストの度に画像をリサイズする Apache モジュール (mod_tofu.so)。</p>
<div class="highlight"><pre><code class="text">/recipes/{:recipe_id}/{:size}/{:hash}
</code></pre>
</div>

<ul>
<li>アタック防止のために末尾に Hash キーを付加</li>
<li>画像処理も可能

<ul>
<li>c</li>
<li>crop (指定したサイズに収める)</li>
<li>q</li>
<li>quality</li>
</ul></li>
<li>細かく指定すれば好きな部分だけ切り取る、もできる</li>
</ul>

<p>画像処理には ImageMagick を利用している。</p>

<ul>
<li>構成

<ul>
<li>C1.XLARGE x6台 で処理</li>
<li>コア数単価が安い</li>
<li>mod_tofu.so は CPU 食うけどメモリ使わない</li>
<li>前段で akamai のキャッシュ</li>
</ul></li>
</ul>

<h2 id="toc_69">苦労話など</h2>

<ul>
<li>ImageMagick と Imlib2

<ul>
<li><a href="http://d.hatena.ne.jp/mirakui/20110123/1295795409">本当は速いImageMagick: サムネイル画像生成を10倍速くする方法</a></li>
</ul></li>
<li>S3

<ul>
<li>s3::ListAllBuckets が正しい結果返さない障害発生</li>
<li>すべての画像が見えなくなった</li>
<li>データは消えないがアクセスできなくなることはある</li>
</ul></li>
<li>akamai or cloudfront

<ul>
<li>cloudfront は元々 S3 のデータを返すものだった</li>
<li>現在は EC2 を origin に使えるようになった</li>
<li>でもやはり akamai は圧倒的に早い</li>
<li>akamai キャッシュヒット率は高くない</li>
<li>90% 程度</li>
<li>試しに ELB 下に Varnish でキャッシュサーバを構築してみたところ 60% ほどヒット

<ul>
<li>TOFU サーバの数を 40% ほど減らせる</li>
</ul></li>
<li>でも Varnish は大容量のメモリが必要なためインスタンスの単価が高い

<ul>
<li>キャッシュサーバ入れるか、TOFU サーバを増やすか、コスト的に微妙なところ</li>
<li>現在はキャッシュサーバは外している</li>
</ul></li>
</ul></li>
</ul>

<p>画像種類もリクエストも多いのにリアルタイムに変換するのは大変そうに思ったのですが、Apache モジュールと聞いて少し納得。キャッシュもうまく組み込んでいて、かなりコストを意識した工夫がされている印象を受けました。</p>

<h2 id="toc_70">AWS移行に向けたクックパッドの取り組み＋α</h2>

<p>クックパッドの菅原元気さんの発表。先日の<a href="http://techlife.cookpad.com/2011/04/22/aws-advantage-seminar/">アマゾンウェブサービスクラウドアドバンテージセミナーで発表された内容</a>をベースに、AWS 移行に向けた全体的なお話。 プレゼン資料がとてもまとまっているので、そちらを直接見たほうが。。。</p>

<h3 id="toc_71">サーバ・ネットワーク構成</h3>

<ul>
<li>現在

<ul>
<li>シンプルな3層構成</li>
<li>別々のセグメントとすることでセキュリティを担保</li>
</ul></li>
<li>新

<ul>
<li>すべてが同じセグメント</li>
<li>セキュリティグループでコントロール</li>
<li>ロール同士の通信は許可</li>
<li>人的ミス対策としてすべてのサーバで iptables 起動</li>
</ul></li>
</ul>

<h3 id="toc_72">AWS でのサーバ</h3>

<ul>
<li>DNS

<ul>
<li>Active-Active 構成で EIP を VIP のように利用</li>
<li>各サーバでは resolv.conf を cron で更新</li>
</ul></li>
<li>AMI

<ul>
<li>基本は CentOS 5.5</li>
<li>各イメージはバージョンをつけて管理</li>
<li>Chef 導入も進めてる</li>
</ul></li>
<li>Nagios + Munin

<ul>
<li>タグをもとに自動で監視項目を設定</li>
<li>起動したインスタンスを cron でチェックして追加</li>
</ul></li>
<li>冗長化

<ul>
<li>ElasticIP を利用</li>
<li>Nagios</li>
<li>LDAP</li>
<li>cron で死活監視</li>
<li>heartbeat への移行</li>
<li>EIP を VIP として利用</li>
<li>マルチキャストが使えないのでユニキャストで</li>
</ul></li>
<li>MySQL

<ul>
<li>EC2 上ではまだ Slave しか稼動していない</li>
</ul></li>
</ul>

<h3 id="toc_73">分散DNSについて</h3>

<p>さすがに全台で resolv.conf を書き換えていくのは大変なのと、いくつかの問題点がクリア出来ない。</p>

<ul>
<li>内容がキャッシュされる</li>
<li>タイムアウト 1s 以下にできない</li>
<li>cron で監視は分単位</li>
</ul>

<p>そのため、分散 DNS を開発。</p>
<div class="highlight"><pre><code class="text">$ ruby gem ddns
</code></pre>
</div>

<p>DNS がそれぞれノードとして機能する動きは、クラウドならではの問題点をクリアするためのひとつの解決策かと思います。現状のサービスを AWS に移行する際の参考になるような、総括的な話でした。</p>

<p>LT もあり、その後の懇親会ではおいしい料理もあり、でとても素敵な勉強会でした。スピーカー＆スタッフの皆様、ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoTechTalk 東京に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/03/08/156"/>
    <updated>2011-03-08T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/03/08/156</id>
    <content type="html"><![CDATA[<p>GTUG 主催の GeoTechTalk 東京に参加してきました。 前日の Yahoo! 主催のカンファレンスとはまた雰囲気が異なり面白いものでした。新サービスなどの発表がない分、技術的な話題が多かったように思います。</p>

<!--more-->

<h1 id="toc_74">New Features and Features You Hadn&#8217;t Heard About Google Maps and Earth</h1>

<p>※ <a href="http://goo.gl/OuXtp">講演資料</a> Google Senior Developer Adovocate の Mano Marks (<a href="http://twitter.com/manomarks">ManoMarks</a>) さんの講演。Google は多くの GeoProducts を提供していて、Location はとても重要な要素として位置づけられている。</p>

<h2 id="toc_75">New features and weys to use Fusion Table</h2>

<p>データをアップロードし、視覚化するためのツール。 FusionTable は以下のような特徴を持つ。 - SpatialQuery (空間クエリ) - 高パフォーマンス &#8211; クリック可能なラスタ画像 &#8211; 100,000 行以上のデータのレンダリング - 簡単に利用可能 - クラウド上でのデータストア - BackendAPI SpatialQueries によって近隣抽出や一定半径内、矩形のバウンディングボックス内などの空間検索が可能となる。</p>

<h3 id="toc_76">Demo</h3>

<ul>
<li>  <a href="http://gmaps-samples.googlecode.com/svn/trunk/fusiontables/rectangle_example.html">Bounding box を用いたサンプル</a></li>
<li>  <a href="http://gmaps-samples.googlecode.com/svn/trunk/fusiontables/circle_example.html">Area search のサンプル</a></li>
<li>  <a href="http://gmaps-samples.googlecode.com/svn/trunk/fusiontables/polygon_example.html">ポリゴンを kml データとして FusionTable にアップロード</a></li>
<li>  <a href="http://code.google.com/apis/maps/documentation/javascript/examples/layer-fusiontables-heatmap.html">Beach の分布を heatmap のように表現</a></li>
<li>  <a href="http://www.shpescape.com/">Shapefile (ESRI) を kml に変換</a></li>
</ul>

<h2 id="toc_77">Real world examples of Styled Maps</h2>

<p>JS, Flash, StaticMap などで色やサイズをカスタマイズする使い方。</p>

<h3 id="toc_78">Demo</h3>

<ul>
<li>  色をカスタマイズしたシューズショップチェーンのサイト</li>
<li>  <a href="http://zee.gr/taxi/">昼と夜で色調が変化するタクシー会社の料金計算サイト</a></li>
<li>  <a href="http://www.xn--slarsteinn-gbb.com/">注記だけで構成された地図 (Word Only Map)</a></li>
<li>  <a href="http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html">Google Maps API Styled Map Wizard</a></li>
</ul>

<h2 id="toc_79">Customizing Street View</h2>

<h3 id="toc_80">Demo</h3>

<ul>
<li>  自分たちで撮影したパノラマ写真を利用した企画</li>
<li>  <a href="http://wonder-tonic.com/zombie/">Street View を用いたゾンビゲーム</a></li>
</ul>

<h2 id="toc_81">The Google Earth API</h2>

<h3 id="toc_82">Demo</h3>

<ul>
<li>  <a href="http://www.youtube.com/user/DriveTheATeamVan">映画 (A-TEAM) のキャンペーンサイト</a></li>
<li>  <a href="http://3dlasvegas.com/">ラスベガスの観光用PRサイト</a></li>
<li>  <a href="http://manomarks.net/earth-sv.html">その他 Street View と組み合わせて実現させたサンプル</a></li>
</ul>

<h1 id="toc_83">ストリートビューのおはなし</h1>

<p>株式会社鳥人間 郷田まり子さん (<a href="http://twitter.com/maripogoda">@MaripoGoda</a>) の講演。</p>

<h2 id="toc_84">Web 版のストリートビュー AP</h2>

<p>ストリートビュー API でできることは、大きく次の4つ。</p>

<ul>
<li>  表示する &#8211; 地図 &#8211; 付随するストリートビュー</li>
<li>  変更する &#8211; 視点位置 &#8211; 方向</li>
<li>  移動する &#8211; 道 (ストリートビュー自身が道の情報を持っている)</li>
<li>  物を置く &#8211; 空間内におくことができる &#8211; 座標計算もやってくれる</li>
</ul>

<p>概念としては「パノラマ」と「POV (Point of View)」の2つを理解することが大事。</p>

<ul>
<li>  パノラマ &#8211; ストリートビューの画像 &#8211; この集まりでストリートビューが構成されている &#8212; StreetViewLink でつながっている</li>
<li>  POV &#8211; 視点 &#8212; heading (方位) &#8212; pitch (仰角) &#8212; zoom (拡大縮小)</li>
</ul>

<p>イベントハンドリングも行える。</p>

<ul>
<li>  pano_changed &#8211; パノラマIDの変更 &#8211; 別のパノラマになったとき</li>
<li>  position_changed &#8211; 位置が変更になったとき &#8211; pano_changed に近い</li>
<li>  pov_chaneged &#8211; カメラの向きが変わったとき</li>
<li>  link_changed &#8211; リンクしてるパノラマが変更されたとき</li>
<li>  visible_changed &#8211; streetview の表示設定が変更されたとき</li>
</ul>

<p>また、オーバーレイ機能を使うと位置情報付きのマーカーをパノラマ中に表示することができる。Marker オブジェクトを使うだけなので好きな画像も利用でき、クリック検知なども可能とのこと。</p>

<h2 id="toc_85">Android での利用</h2>

<p>Android では、Web ページからは URL スキーム &#8220;google.streetview&#8221; に反応するようになっている。アプリから開きたい時は Intent を飛ばすことで実現できるが、ブラウザ版ほどいろいろできる訳ではないので今後に期待。</p>

<h2 id="toc_86">Hack のヒント</h2>

<p><a href="http://www.sightspacestation.com/">ToriSat</a>:国際宇宙ステーションの見え方をシミュレーションしてくれる、ちょっと AR っぽい使い方<br><br>
自転車連動:Proce55ing でクライアントアプリを作り、自転車をこぐとストリートビューが移動する使い方 (VRっぽい)</p>

<p>ドキュメントは Google Maps API の一部として扱われているので、そこを参照するとよい。</p>

<h1 id="toc_87">GoogleMaps と GoogleAppEngine を用いたAndroid 端末のトラッキング</h1>

<p>株式会社ゴーガ 小山文彦さん (<a href="http://twitter.com/fumy231">@fumi231</a>) の講演。</p>

<h2 id="toc_88">企画の流れ</h2>

<h3 id="toc_89">2009年 : <a href="http://tomara.jp/">トーマラ</a></h3>

<p>HT-03A が発売され、何か Android ならではのアプリを作りたいという思いがきっかけでリリース。実際に制作をしてみた結果、課題が見えてきた。</p>

<ul>
<li>  電池が長く持たない &#8211; 予備電池が必須？</li>
<li>  参加者へのアプローチがひとつ &#8211; 利用するメリットをできるだけ多く &#8211; がんばって作ったが &#8212; 記事掲載数本 &#8212; 数名が登録 &#8211; 東京マラソンの記載が &#8212; 商標になってるので使えない &#8212; ニュースリリースに載せちゃった → おこられた</li>
</ul>

<h3 id="toc_90">2010年 : 箱根駅伝速報マップ</h3>

<p>Google + KDDI + TOYOTA + NTV の協力を得て箱根駅伝中継時に位置をトラッキングするサイトをリリース。</p>

<ul>
<li>  往路のテレビ中継でアナウンス &#8211; その後サイト停止状態に &#8212; memcache のキャッシュが切れる瞬間に4桁アクセスで落ちた &#8211; 2時間後に応急処置終了 &#8212; Android アプリ側がタイムアウトで停止 &#8211; 先頭だけ表示する予備コンテンツで対応</li>
<li>  課題 &#8211; サイト &#8212; AppEngine ログを分析して修正 &#8211; アプリ &#8212; タイムアウトしても動くように見直し</li>
<li>  結果 &#8211; 復路は問題なく稼働</li>
</ul>

<h3 id="toc_91">2010年 : <a href="http://www.one-tokyo.jp/">ONE TOKYO</a></h3>

<p>東京マラソンに合わせて第2弾として、トーマラを改良したサービスをリリース。</p>

<ul>
<li>  利用者 &#8211; 10人くらい</li>
<li>  Androidアプリ &#8211; 10秒ごとに GET で位置送信 &#8211; 1分ごとに latitude 送信 &#8211; Google Maps 表示 &#8212; 走行距離 &#8212; 折り返し対応 &#8212; 予想ゴールタイム</li>
<li>  管理ツール &#8211; 裏でフジテレビにも使ってもらったため、アプリ側からの送信ができてないとき表示されるように</li>
</ul>

<h2 id="toc_92">開発時の検討事項</h2>

<p>サービスをリリースしてみての工夫した点など。ちなみに、今回はサーバサイド AppEngine + Python で構築していたとのこと</p>

<ul>
<li>  コードの単純／極小化 &#8211; 通常は一瞬で終わる処理でも高負荷時には時間かかるようになることもある &#8211; 複数処理を非同期でつなぐように工夫</li>
<li>  hashを使ったマッチング &#8211; メールアドレスなどで利用</li>
<li>  時刻は GMT のままで表示する時に補正</li>
<li>  トランザクション内で処理完結</li>
<li>  appstatsの活用</li>
<li>  TaskQueueの活用</li>
<li>  batch get の活用 &#8211; その処理が user のリクエストで動かなきゃいけないのか判断して切り分ける</li>
<li>  Memcache のキャッシュ期限が切れるタイミングをどうするか &#8211; 今回は20秒に設定 &#8211; 二重化するなどで対応できるかも？</li>
</ul>

<h2 id="toc_93">1日サービスの課題</h2>

<p>1日だけしか使われないサービスの場合、考慮しなければならないポイントがいくつかある。</p>

<ul>
<li>  いつリリースするか</li>
<li>  本当にリリースされるかわからない不安</li>
<li>  できることとできないこと、優先度の振り分け</li>
<li>  当日までの体裁をどうするか- 終了後をどう見せるか</li>
<li>  データがない状態でうまく説明する方法 &#8211; 当日朝に flush するので、S-in 直後はデータがない状態</li>
<li>  負荷テスト必須</li>
<li>  できれば第三者レビューも</li>
</ul>

<h1 id="toc_94">インクカートリッジ里帰りプロジェクトの地図検索機能における業務適用事例</h1>

<p>セイコーエプソン株式会社 石丸 健太郎さん (<a href="http://twitter.com/kehi">@kehi</a>) の講演。使用済みインクカートリッジを回収する<a href="http://www.inksatogaeri.jp/">インクカートリッジ里帰りプロジェクト</a>での Google Maps の活用事例。</p>

<h2 id="toc_95">実例</h2>

<p>もともと回収箱のリストが PDF で公開されているだけだったので、シンプルに地図を表示するようにしたとのこと。</p>

<ul>
<li>  位置取得 &#8211; HTML5 の GeoLocationAPI を利用</li>
<li>  地名で移動 &#8211; GeoCoder を利用</li>
<li>  外観表示 &#8211; StreetView</li>
<li>  道案内 &#8211; DirectionsService に引数を渡すだけ</li>
<li>  情報表示 &#8211; ステータスに連動した機能を実装 &#8211; 投函した日から状況を計算するなど</li>
</ul>

<h2 id="toc_96">Tips</h2>

<ul>
<li>  v3 ではマーカーは自力消去が必要 &#8211; setMap(null) などで可能 &#8211; マーカーをアニメーションさせていたので気づけた</li>
<li>  大人の事情で異なる文字コードの共存する状態 &#8211; iflame 使うといい- URL から引数を取得してピンポイントに表示できるような URI 設計 &#8211; 個別の項目にリンクをはれる &#8211; 導線を考慮したサービスになる</li>
<li>  とにかく動くものを見せることが大事 &#8211; 政治層を突破するきっかけになる</li>
<li>  サービスの機能やデータは API で公開するとよい &#8211; MashUp などで活用してもらえる</li>
</ul>

<h2 id="toc_97">その他</h2>

<p>個人的に作成されてるサービスとして <a href="http://ibox.geo.jp/">rememberbox</a> を紹介。位置にリマインダを登録しておくサービスで、iPhone/Android 対応とのこと。</p>

<h1 id="toc_98">Google Maps/Earth Now</h1>

<p>株式会社エクサ 安藤幸央さん (<a href="http://twitter.com/yukio_andoh">@yukio_andoh</a>) の講演。WebAPI の中でも、Mapping 系の API が最もよく使われていることが調査からわかっている。</p>

<h2 id="toc_99">最近の動向</h2>

<ul>
<li>  Google Maps for mobile in 3D &#8211; Google Maps の 5.0/5.2 では 3D 表示が可能 &#8211; 5.2 では Google place (おみせメモ) にも対応</li>
<li>  Maps API Docs &#8211; <a href="http://code.google.com/intl/ja/apis/maps/documentation/javascript/">Google Maps JavaScript API V3</a> ドキュメントがかなり充実 &#8211; 特に FAQ には利用規約などたいていのことが書かれている</li>
<li>  Google Places API &#8211; パブリックβにはなってる &#8211; まだキーがもらえないので、公開を待つしかない</li>
<li>  Google Art Project &#8211; StreetView + AppEngine + Picasa の技術を組み合わせている &#8211; 美術館内をストリートビューで見れるような感じ</li>
</ul>

<h2 id="toc_100">面白いサイトなどの紹介</h2>

<ul>
<li>  PuchiPuchiEarth &#8211; Android au のキャンペーン</li>
<li>  <a href="http://www.jmc.or.jp/app/iphone/tokyo/">東京時層地図</a> &#8211; 今後は時間の流れ、履歴を保持することも課題かもしれない</li>
<li>  シムシティのような3D地図 &#8211; <a href="http://map.baidu.com/">Baidu</a> &#8211; <a href="http://edushi.com/">E都市</a></li>
<li>  <a href="http://yamato.mapping.jp/">宇宙戦艦ヤマトのキャンペーン</a></li>
<li>  <a href="http://instaramen.com/">InstaRamen</a> &#8211; 流行のサービスと地図情報は組み合わせられるのでは</li>
<li>  VirginAtralntic の機内で表示される地図が Google Maps</li>
<li>  <a href="http://www.mapyourvalentine.com/">mapyourvalentine.com</a> &#8211; バレンタイン次期限定のサービス &#8211; 思い出の場所にピンが重なって立っていてハート形になってる</li>
</ul>
]]></content>
  </entry>
  
</feed>
