<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tag: development | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/tags/development/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T18:31:50+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[hatak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2012 で話してきた]]></title>
    <link href="http://blog.hatak.net/2012/09/29/17281"/>
    <updated>2012-09-29T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2012/09/29/yapcasia-tokyo-2012</id>
    <content type="html"><![CDATA[<p>9/27-29 の日程で東京大学で <a href="http://yapcasia.org/2012/" title="YAPC::Asia 2012">YAPC::Asia Tokyo 2012</a> が開催されています。 応募したトークを採用していただいたので、スピーカーとして参加させていただきました。</p>

<p><a href="http://www.slideshare.net/idhatak/ss-14499185">http://www.slideshare.net/idhatak/ss-14499185</a>">http://www.slideshare.net/idhatak/ss-14499185">http://www.slideshare.net/idhatak/ss-14499185</a></a></p>

<!--more-->

<p>諸般の事情でまだサービスリリースがされていないこともあり、かなり概説的な内容となっています。このような場でトークさせていただくのは MySQL Casual に続いて2度目だったのですが、内容が少し分散してしまいまとまりのない感じになってしまったところが反省でした。</p>

<p>YAPC でのスピーカーは一つの目標でした。</p>

<p>はじめて Perl-CGI に触れたのは高校生の頃でした。当時はアクセスカウンタや掲示板のスクリプトでしたが、&#8221;プログラムがホームページで動く&#8221; ということ自体にわくわくしながら見よう見まねでいじってました。大学でもデータ解析やサーバ管理など、何かプログラムを書くときには Perl を使っていました。</p>

<p>その後、社会に出てから改めてオブジェクト指向やモダンな Perl を学びました。サーバ管理などの小さなスクリプトからWebサービスまで、業務で利用してきた期間も5年近くになります。私にとっての Perl はこれまで一番お世話になっているプログラム言語であり、今エンジニアとして仕事をしているのも Perl のおかげだと思っています。</p>

<p>昨年の YAPC::Asia Tokyo 2011 で @lestrrat さんや @941 さんが「来年はないかも知れない」という話をされていたこともあり、開催告知がされた時に応募しようと思っていました。お世話になった Perl を盛り上げたい、何か恩返しにでもなればという思いからでした。</p>

<p>このような思いを踏まえてうまく伝えられなかったなと反省しているのですが、拙い発表を聞いていただいた方の中に一人でも何か新しいこと・今までと違う視点に気づいていただけたならそれで良いのだと自分に言い聞かせています。</p>

<p>年に一度のお祭りですが、参加するたびに自分が Perl を取り巻く文化に魅了されていることに気づかされます。 様々なトークがあり、いろんな視点での意見が交わされているのはとても刺激になりますし、テンションも上がります。この勢いでサービスもうまく形にして、同時に自分自身についてもしっかりと考えていきたいと思いました。</p>

<p>他のトークに優先して聞きに来てくださったみなさま、素敵なカンファレンスを運営してくださっている JPA とスタッフのみなさま、そして多くのスポンサーのみなさま、ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitosis で作るプライベートな git サーバ]]></title>
    <link href="http://blog.hatak.net/2011/05/18/571"/>
    <updated>2011-05-18T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/05/18/gitosis</id>
    <content type="html"><![CDATA[<p>業務で使い始めた Git ですが、高機能過ぎて未だに使いこなせている自信がありません。 一方で、かつて利用していた Subversion はコマンドを忘れてしまって使うたびにググるほどに記憶が抜けつつあります。</p>

<p>そんな Git を複数メンバー・複数環境で利用する場合、マスターリポジトリを利用することがあります。これにより、Subversion のような中央集約型のソースコード管理をしつつも Git の恩恵を受ける開発スタイルを取ることができるます。 マスターリポジトリとして <a href="http://github.com/">GitHub</a> を利用するのが最も手っ取り早いですが、プライベート（= メンバーのみが閲覧できる）なリポジトリを作成するためには有料オプションにしなければなりません。しかも地味に高い。</p>

<p>こんな時、gitosis を利用すると手軽にプライベートな Git サーバを構築することができます。もちろん、リポジトリを利用するメンバー全員が SSH での接続ができるサーバに bare リポジトリを作ることでも Git サーバとして機能しますが、それでも gitosis を使う優位性は以下のような点にあります。</p>

<ul>
<li>公開鍵認証を用い、通信にSSHを利用するため安全に利用できる</li>
<li>公開鍵でユーザを識別し、リポジトリに対するアクセス制御が設定できる</li>
<li>サーバにアカウントとは切り離して、リポジトリへのアクセスアカウントの作成ができる</li>
</ul>

<p>gitosis はマスターリポジトリとして利用するサーバのみインストールします。リモートから clone / pull / push をするクライアントには、通常通りの Git がインストールされていれば利用することができます。</p>

<!--more-->

<h2 id="toc_166">パッケージ導入</h2>

<p>gitosis は python で記述され、gitで管理されているプロジェクトです。 CentOS の場合、EPEL リポジトリに Git / gitosis 共にパッケージが存在するので、これを利用することで簡単にインストールできます。</p>
<div class="highlight"><pre><code class="text">$ sudo yum install git python-setuptools gitosis
</code></pre>
</div>

<p>この方法で導入した場合、gitosis ユーザが合わせて作成されます。</p>

<ul>
<li>uid: gitosis</li>
<li>home dir: /var/lib/gitosis</li>
</ul>

<h2 id="toc_167">初期設定</h2>

<p>gitosis の設定は、 gitosis 管理リポジトリのファイルを変更し push することで反映されます。 設定を行うためには、管理ユーザとして最低一人の公開鍵をセットしなければなりません。ここでは、Git サーバ上の現在の操作ユーザの鍵を管理ユーザとしてセットする例を示します。</p>
<div class="highlight"><pre><code class="text">$ cd /var/lib/gitosis
$ sudo -H -u gitosis gitosis-init &lt; ~/.ssh/id_rsa.pub
</code></pre>
</div>

<p>これで、gitosis のホームに &quot;gitosis&quot; ,&quot;repositories&quot; という2つのディレクトリが生成されます。<br>
この gitosis 管理リポジトリを、登録した鍵を持つクライアント（ここでは同一ホスト）からcloneし、設定します。</p>
<div class="highlight"><pre><code class="text">$ cd ~/work
$ git clone gitosis@localhost:gitosis-admin.git
</code></pre>
</div>

<p>設定を変更後、push することで Hooks のスクリプトが実行されることで key が gitosis ユーザの authorized_keys に追記されていきます。 この authorized_keys には command が併記されているため、git のリモートリポジトリを操作する以外のコマンドが実行できないようになっているのです。</p>

<h3 id="toc_168">新規ユーザの追加</h3>

<p>新規ユーザの追加は、*.pub ファイルを作成して該当するグループに追記、push するだけです。 gitosis では、グループ毎に権限をコントロールする形式を取ります。このため、ユーザが複数のグループに所属しているとうまく動作しないことがあります。 *.pub は単なる authorized_keys なので、1行にひとつの公開鍵を書く形式になっていれば複数設定可能です。</p>

<h3 id="toc_169">新規リポジトリの追加</h3>

<p>新規リポジトリの追加は、gitosis.conf に変更を加えて push するだけです。空のまま pull すると init されるだけですが、追加して push すれば大丈夫です。</p>

<h2 id="toc_170">設定のコツ</h2>

<p>keydir 以下に公開鍵ごとにファイルを作成し、 gitosis.conf に公開鍵のファイル名 (.pub を除く) を設定していきます。</p>
<div class="highlight"><pre><code class="text">[gitosis]

[group gitosis-admin]
writable = gitosis-admin
members = admin

[group development]
writable = misc/sandbox project test
members = hatak hoge fuga
</code></pre>
</div>

<h3 id="toc_171">サブディレクトリ</h3>

<p>リポジトリはサブディレクトリに入れることができます。 上記 sandbox の場合は次のようになります。</p>

<ul>
<li>Clone 用 URL : ssh://gitosis@localhost/misc/sandbox.git</li>
<li>サーバ内ファイルシステム: /var/lib/gitosis/repositories/misc/sandbox.git</li>
</ul>

<p>サブディレクトリは予め作成しておく必要がありますが、こうすることで乱立するリポジトリを階層分けして整理することができます。</p>
<div class="highlight"><pre><code class="text">$ sudo -H -u gitosis mkdir /var/lib/gitosis/repositories/misc
</code></pre>
</div>

<h3 id="toc_172">config の改行</h3>

<p>gitosis.conf ではユーザが多いときなどバックスラッシュを入れることで、設定ファイル内でも改行することができます。 ユーザが多いときなどに可読性を上げることができ、とても便利です。</p>

<h2 id="toc_173">関連するページ</h2>

<ul>
<li><a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way">Hosting Git repositories, The Easy (and Secure) Way</a></li>
<li><a href="http://labs.gree.jp/blog/2011/03/2885/">多人数開発で Git を使う場合の環境構築 | GREE Engineers&#39; Blog</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
