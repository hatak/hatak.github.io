<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tag: conference | Hatak::Techlog]]></title>
  <link href="http://blog.hatak.net/blog/tags/conference/atom.xml" rel="self"/>
  <link href="http://blog.hatak.net/"/>
  <updated>2014-02-15T16:33:39+09:00</updated>
  <id>http://blog.hatak.net/</id>
  <author>
    <name><![CDATA[hatak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2011 (2日目) に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/10/16/6777"/>
    <updated>2011-10-16T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/10/16/yapcasia-tokyo-2011-2</id>
    <content type="html"><![CDATA[<p>昨日に引き続いて、 <a href="http://yapcasia.org/2011/" title="YAPC::Asia">YAPC::Asia</a> に参加してきました。</p>

<p>個人的な視点で、今回の YAPC から感じた Perl とそれを取り巻く Web サービス系の世界の現状をいくつかまとめると、</p>

<ul>
<li>前回参加した 2 年前に発表された PSGI はもはや標準</li>
<li>プラットフォーマーを中心に大規模サービスのノウハウが溜まってきている</li>
<li>アプリケーションの設計・実装でも、ミドルウェアやハードウェアも含めた視点がより大事になっている</li>
<li>組織が大きくなった会社では、開発者と運用者の良い関係づくり (DevOps の考え方) に取り組んでいる</li>
</ul>

<p>といったところかなと思います。 会社で標準的に使われている開発言語が違っても、根底の考え方や Web サービス系全般での動きは同じだなと痛感しました。</p>

<!--more-->

<hr>

<h2 id="toc_324">続 Unix Programming with Perl</h2>

<p>※講演資料 <a href="http://www.slideshare.net/kazuho/unix-programming-with-perl-2">[No Title]</a> DeNA の kazuho (<a href="http://twitter.com/kazuho">@kazuho</a>) さんの講演。<a href="http://www.slideshare.net/kazuho/unix-programming-with-perl">前回</a>に引き続いて、Unix 環境で正しく動くコードを作るための Tips 紹介のトークでした。Unix の知識が足りずまだ理解が追いついていないので、調べて試さないとと感じた発表でした。</p>

<h3 id="toc_325">正しいコードを書くために</h3>

<ul>
<li>テストだけでは足りない</li>
<li>常に正しく動くコードを書くためには知識が必要 &#8211; Perl の知識 &#8211; OS の知識</li>
</ul>

<h3 id="toc_326">IPC::Open3 によるプロセス間通信</h3>

<ul>
<li>pipe したときにブロックしてしまうケースがある &#8211; 子プロセスが STDIN 待ちになる場合 &#8211; 子プロセスが大量のエラーを吐く場合 &#8212; pipe が制限を持っている &#8212;- MacOSX : 16 Kbyte &#8212;- Linux2.6 : 64 Kbyte</li>
<li>deadlock とならないためには？ &#8211; クローズしてもうまくいかない &#8211; 標準出力全部読んでもうまくいかない &#8211; IPC::Open3 のオプションとして、標準エラー出力に undef いれる &#8211; pipe を使わず temporary file 使えばいい</li>
</ul>

<h3 id="toc_327">Unix signals と race condition (競合状態)</h3>

<ul>
<li>POSIX::pselect &#8211; pselect の外で SIGHUP &#8212; 多くのディストーションでの実装がバグっているため、実際には解決しない &#8211; eval &amp; die &#8212; これでもうまく解決しない &#8211; call syswrite on signal</li>
</ul>

<h2 id="toc_328">まとめ</h2>

<ul>
<li>buffesize は無限大ではない</li>
<li>shell invocation は危険なので system か IPC::Open3 を使う</li>
<li>Unix signals のハンドリングでは競合に気をつける</li>
</ul>

<hr>

<h2 id="toc_329">運用しやすいWebアプリケーションの構築方法</h2>

<p>※講演資料 <a href="http://www.slideshare.net/kazeburo/yapcasia2011">[No Title]</a> Livedoor の kazeburo (<a href="http://twitter.com/kazeburo">@kazeburo</a>) さんの講演。これまでの運用経験を基に、運用しやすい Web アプリケーションとなるためのログや DBI / cache の使い方・Tips をまとめて紹介されていました。確かに、と思うポイントが多く、とても参考になるトークでした。</p>

<h3 id="toc_330">運用しやすいとは？</h3>

<ul>
<li>耐障害性を考慮に入れた設計</li>
<li>アプリケーションからの情報発信</li>
<li>処理単位の明確化</li>
</ul>

<h3 id="toc_331">ログ</h3>

<ul>
<li>「アプリからの情報発信」 &#8211; 障害発生の際に最初に見る &#8211; 障害の検知、原因の特定</li>
<li>適切なログに含まれる情報 &#8211; 時間 &#8211; ログレベル &#8212; 基準を決めて &#8220;DEBUG&#8221;/&#8221;INFO&#8221;/&#8221;WARN&#8221;/&#8221;ERROR&#8221; を使い分ける &#8211; 環境 &#8212; pid や uid、引数など &#8211; caller / stacktrace &#8211; 読み取る人に伝わるメッセージ</li>
<li>Log::Minimal &#8211; 上記の適切なログ基準に沿ってログを出せるようにした &#8211; シリアライズ / カラーリング なども可能</li>
</ul>

<h3 id="toc_332">DBI (SQL)</h3>

<h4 id="toc_333">DB 負荷が急上昇するケース</h4>

<ul>
<li>原因クエリ探す</li>
<li>なんのクエリかアプリで確認</li>
<li>ORM を使っていると調べにくいこともある &#8211; SQL とコードが一致しなく鳴るため、SQL 生成を避けたい</li>
<li>DBIx::Sunny &#8211; caller 情報を SQL に埋込みクエリコメントにできる &#8211; SQL::Maker と組み合わせて利用できる</li>
</ul>

<h4 id="toc_334">接続が滞留するケース</h4>

<ul>
<li>最大接続数に達して接続エラー &#8211; メンテナンス時に timeout まで待つ &#8211; SHOW INNODB STATUS が見れない</li>
<li>接続滞留対策 &#8211; Scope::Container &#8212; DB 接続部の処理単位を短く、わかりやすく &#8211; Scope::Container::DBI &#8212; 上記を簡単に実現するために便利機能を追加したモジュール</li>
</ul>

<h3 id="toc_335">cache / memcached</h3>

<ul>
<li>課題 &#8211; Session::Store::Memcached &#8212; 簡単で高速、Expires 処理も自動化できる &#8212; 一方でストレージ永続性がないのは困ることもある &#8211; 特定キャッシュへの集中 &#8212; 分散アルゴリズム上でも特定サーバに集中してしまうことがある &#8211; cache thundering herd problem &#8212; memcache 上で exipre した瞬間に DB にアクセスが集中してしまう</li>
<li>Cache::Memcached::IronPlate &#8211; 冗長して保存することで cache の冗長性確保 &#8211; cache の負荷分散も行える</li>
<li>Cache::Isorator &#8211; ゆっくり expire させることができる</li>
</ul>

<h3 id="toc_336">Metrics</h3>

<ul>
<li>プロセスのステータスを取得できるようにしてグラフ化する &#8211; Plack::Middleware::ServerStatus::Lite &#8211; Parallel::Scoreboard</li>
</ul>

<h3 id="toc_337">まとめ</h3>

<ul>
<li>耐障害性を考慮に入れた設計 &#8211; cache &#8211; memcached</li>
<li>アプリケーションからの情報発信 &#8211; DBI &#8211; ログ &#8211; Metrics</li>
<li>処理単位の明確化 &#8211; DBI connection</li>
</ul>

<hr>

<h2 id="toc_338">watch your log</h2>

<p>DeNA の nekokak (<a href="http://twitter.com/nekokak">@nekokak</a>) さんの講演。社内 DevOps の観点から基準を決めてログ出力し、それを監視するためのツールを作成したというお話。&#8221;DevOps&#8221; と &#8220;ログ監視&#8221; については各社でかなり試行錯誤しているところかもしれません。 ログ監視は最近色々考えていて自分で実装しようかなと思っているところだったので、Komainu も試してみます。あと、「必要に応じたエンジニアリング」というスタンスはいいなと思います。</p>

<h3 id="toc_339">DevOps</h3>

<ul>
<li>Dev と Ops 相互に協力する事が必要 &#8211; 自社 Dev は運用を考えられなければならない &#8211; 自社 Ops は Dev から渡される運用を丸受けしてはダメ</li>
<li>Dev Ops の垣根取り払って密なコミュニケーションを</li>
<li>運用を考えられる Dev &#8211; 障害は一次対応が Ops のことが多い &#8211; 運用したことないミドルウェアを導入する場合は、事前に互いに調べて共有 &#8211; 仕様変更 / 新機能のリリースタイミングで共有を行う</li>
<li>丸受けしない Ops &#8211; サービス仕様・アーキテクチャを理解 &#8211; 障害発生時に何を対応する必要があるか理解 &#8211; 必要な情報は Dev に提出 &#8211; 「お母さん役みたいなもの」</li>
</ul>

<h3 id="toc_340">コミュニケーション濃度の問題</h3>

<ul>
<li>お互いしっかりコミュニケーション取る</li>
<li>コミュニケーションもレベル・粒度ある</li>
<li>「お互い言い分あるだろうが gdgd 言う前に行動しろ」</li>
</ul>

<h3 id="toc_341">障害そして監視</h3>

<ul>
<li>障害検知の仕組みとして監視必要 &#8211; 死活監視 &#8211; リソース監視 &#8211; ログ監視</li>
</ul>

<h3 id="toc_342">ログ</h3>

<ul>
<li>お互いで取り決めたフォーマットに沿ったログ出力 &#8211; Dev と Ops が面倒みるにあたって取り決めるといい</li>
<li>accesslog / errorlog &#8211; 監視する項目の取り決めをしておく &#8211; ステータスコード監視でサービスがどのような状況か分かる</li>
<li>applog (syslog) &#8211; フォーマットの取り決めが重要なところ &#8211; 障害レベルの分類をログレベルで出力するなどの取り決め &#8212; 携帯にメールか、会社のメールかでレベルか</li>
<li>mysql slow log &#8211; だいたいボトルネックは DB のことが多い</li>
<li>ログ収集方法 &#8211; ログを良い感じで監視できるソリューションがない</li>
</ul>

<h3 id="toc_343">Komainu</h3>

<ul>
<li>設定に応じて集計 &#8211; accesslog 集計 &#8211; applog 集計 &#8211; mysql slow log 集計</li>
<li>アーキテクチャ &#8211; fork model &#8211; notify は IRC と Email &#8211; データは database に保存 &#8212; サマリ集計し、前回からどれくらい増えたか知りたい &#8212; グラフ化する &#8212; プロセス間通信せずにデータを受け渡す</li>
<li>何が重要か &#8211; サービスクオリティ維持のため &#8211; 利用者からの問い合わせベースで障害に気づくのは情けない &#8211; 攻めの運用 &#8211; ログ情報を通知することでエラーに向きあう</li>
</ul>

<h3 id="toc_344"><strong>Shut the fuck up and write some code</strong></h3>

<ul>
<li>行動こそすべて</li>
<li>誰かが始めないと何も始まらない</li>
<li>問題意識を持った人が率先して行動 &#8211; コードの良し悪しなどはどうでもいい</li>
</ul>

<hr>

<h2 id="toc_345">Managing A Band Of Hackers</h2>

<p>DeNA の hidek (<a href="http://twitter.com/hidek">@hidek</a>) さんの基調講演。Perl ハッカーを束ねるマネージャーとしての考え方や経験のお話でした。 とてもいい話でした。DeNA には優秀で著名な方が集まっているイメージがありますが、このようなコミュニティというか、仲間の魅力が根底にはあるのだろうなと感じる内容でした。途中、何度もチームを褒めているところが、率直に褒めているように感じられて印象的でした。</p>

<h3 id="toc_346">management</h3>

<ul>
<li>なぜマネージャーが必要？ &#8211; 一人では規模の限界</li>
<li>集団で物事を作るということ &#8211; バラバラに動くと個人個人のプレーになってしまう &#8211; 誰かが指揮する &#8211; これがマネージャー</li>
<li>&#8220;The whole is more than the sum of its parts.&#8221; &#8211; 1 + 1 が 2 以上になるようにしなければならない</li>
</ul>

<h3 id="toc_347">tasks of the manager</h3>

<ul>
<li>マネージャーの業務にはエンジニアとしての経験が必要 &#8211; 大規模なほど広いレイヤの知識が必要</li>
</ul>

<h4 id="toc_348">project management</h4>

<ul>
<li>プロダクトのライフサイクルを維持する &#8211; エンジニアリング未経験だと無理</li>
<li>計画を立てる</li>
<li>開発中の進捗・マイルストーン管理</li>
</ul>

<h4 id="toc_349">personal matters</h4>

<ul>
<li>人事も大事</li>
<li>採用面接 &#8211; 見極める力が求められる</li>
<li>配属 &#8211; 仕事を与えるということ &#8211; その人の持ってる力などを見極めることが大切 &#8211; コミュニケーション能力も必要 &#8212; その人が何をしたいのかを聞く</li>
<li>評価 &#8211; どんな仕事をしたか、を見るためにもエンジニア経験が必要</li>
</ul>

<h4 id="toc_350">etc</h4>

<ul>
<li>事務仕事</li>
<li>会議 &#8211; 無駄なものもあるが、最近必要と感じることもある &#8212; 海外支社とのテレビ会議など、図を書いたりすることで理解が早くなる &#8211; Face to Face も重要</li>
</ul>

<h3 id="toc_351">the manager of hackers</h3>

<ul>
<li>少しとんがった人たちのマネージャーとして</li>
<li>Platform System Group &#8211; プロジェクト開始時は 3 名、現在 20 名 &#8211; CPAN Author が 6 名</li>
</ul>

<h4 id="toc_352">hackers はどういう人達か</h4>

<ul>
<li>&#8220;no man is an island&#8221; &#8211; 一人だと寂しくて死んじゃう</li>
<li>get bored easily &#8211; 飽きっぽい &#8211; 餌を与え続ける</li>
<li>priority &lt; interest &#8211; つまらない仕事を与えつつも、先に楽しい仕事を用意しておく</li>
<li>late morning, late nite &#8211; 働いている時間は一緒 &#8211; 裁量労働なので良いが、相談したいときにいつ来るかわからないのは困ることも</li>
<li>KY &#8211; 読めない事自体は仕事に影響しないので、悪いことではない &#8211; 悪ノリする</li>
</ul>

<h3 id="toc_353">what should I do ?</h3>

<ul>
<li>これはハッカーのマネージャーだけでなく、一般でも通じるところはある</li>
</ul>

<h4 id="toc_354">delegation</h4>

<ul>
<li>仕事を任せる &#8211; 失敗もするけど、任せると成長する</li>
<li>自分でやっちゃおう、と思うこともある</li>
<li>「任せる」と「丸投げ」は違う &#8211; 任せるための準備はする &#8211; バックアッププランは作る &#8211; 失敗したらマネージャーが責任を持つ</li>
</ul>

<h4 id="toc_355">bad news first</h4>

<ul>
<li>悪い報告を先にするようにしてもらう</li>
</ul>

<h4 id="toc_356">TMTOWTDI</h4>

<ul>
<li>やり方は一つではない &#8211; これはマネジメントだけではない</li>
<li>多様性を許容する</li>
</ul>

<h3 id="toc_357">マネージャが少ない会社は大変</h3>

<ul>
<li>マネージャは優秀なエンジニアじゃないとできない &#8211; 選択肢として考えて欲しい</li>
</ul>

<h3 id="toc_358">コミュニティに参加して欲しい</h3>

<ul>
<li>技術的な刺激を受けられる</li>
<li>人脈を作る &#8211; マネージャとして重要 &#8211; 最終的には経験の糧になる</li>
</ul>

<hr>

<p>このほか、LT なども面白く刺激的なものが多く、とても良いカンファレンスでした。</p>

<p>次回がどのようになるかはまだ未定とのことでしたが、次回が YAPC::Asia どこで行われても参加したいと思っています。同時に、これまではカンファレンスやセミナーに参加しつつもずっと聞く側でしたが、今後は YAPC に限らず、もっとコミュニティ全般に対して積極的に貢献できる活動をしたいと思った 3 日間でした。</p>

<p>発表者、スタッフ、参加者、そしてスポンサー企業のみなさま、お疲れ様でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2011 (1日目) に行ってきた]]></title>
    <link href="http://blog.hatak.net/2011/10/15/6689"/>
    <updated>2011-10-15T00:00:00+09:00</updated>
    <id>http://blog.hatak.net/2011/10/15/yapcasia-tokyo-2011-1</id>
    <content type="html"><![CDATA[<p>Perl のおまつり、 <a href="http://yapcasia.org/2011/" title="YAPC::Asia">YAPC::Asia</a> に参加しています。<br>
昨年はプライベートでドタバタしていたので、2 年ぶりの参加でした。前回に比べて参加者も多く、それでいてスムーズなイベント進行と素敵なトークの数々でとても楽しい時間を過ごしています。 ひとまず 1 日目を振り返りつつ、聞いたトークをまとめておこうと思いました。</p>

<p>振り返ると、インフラ寄りな内容を選んでいたこともありますが、今日は Perl に限らない話も多かったように思います。それだけ広い知識と経験が必要で、いろんな所でいろんなひとが挑戦していることがわかってわくわくしましたが！</p>

<!--more-->

<hr>

<h2 id="toc_359">Perl 5.16 and beyond</h2>

<p>今回のスペシャルゲスト、 Perl5 開発リーダーの Jesse Vincent (<a href="http://twitter.com/obra">@obra</a>) さんの講演。Perl5 の開発プロセスがどのように変化してきたか、そして今後の Perl5 がどうなっていくのかというお話でした。 （英語のセッションだったので内容を頭の中で理解するのが追いつかずメモ取りきれなかったので間違えていたら指摘をお願いします。。）</p>

<h3 id="toc_360">Pumpking</h3>

<p>Perl5 の開発体制が整ってきたのでリリーススパンが早くなってきた。</p>

<ul>
<li>VCS を Git に変えた</li>
<li>リリースをコミッタの持ち回りに</li>
<li>約 1 年で 5.12 → 5.14 そして Perl 開発マネージャーとしての仕事についての説明。</li>
<li>Perl5 の方向性を決める</li>
<li>開発メンバーにタスクを振る</li>
<li>仕様に関する文書をまとめる つまり <strong>&#8220;You make Perl&#8221;</strong></li>
</ul>

<h3 id="toc_361">Vision</h3>

<p>&#8220;New version should not break old environment&#8221; と &#8220;Perl should run everywhere&#8221;</p>

<ul>
<li>互換性を重視しつつ、進化は続ける</li>
<li>use でバージョンを指定した場合はその指定されたバージョンの挙動に合わせる &#8211; 古い文法には極力沿うようにする &#8211; 指定されたバージョンよりも新しい機能は動かないようにする</li>
</ul>

<p>そして機能をシンプルにして、仕様を明確化させる。</p>

<ul>
<li>Core の機能をモジュールとして分割する &#8211; &#8220;traditional&#8221; と &#8220;bootstrappable&#8221; の 2 種類のエディションに</li>
<li>別の言語でも再実装できるように &#8211; 生き残るために</li>
</ul>

<hr>

<h2 id="toc_362">Webアプリケーション高速化</h2>

<p>※講演資料 <a href="http://ma.la/files/yapcasia2011/#0">YAPC::Asia 2011 / 高速化のはなしとか</a> ライブドアの mala (<a href="http://twitter.com/bulkneets">@bulkneets</a>) さんの講演。すべてを聞いたあとの「気持よく書ける範囲で最適化」というまとめに納得しました。先回りしてキャッシュしておく戦略は難しそうですが、効果は大きそうなのでやってみたいと思っています。</p>

<h3 id="toc_363">はじめに</h3>

<ul>
<li>チューニングについてのスタンス &#8211; 努力だけでどうにもならないときは、卑怯な手段を使う &#8211; バレなきゃイカサマではない</li>
<li>方法はいろいろ &#8211; 頑張って高速化する「努力」 &#8211; そもそも処理しない「Hack」 &#8211; SSD など「財力」</li>
<li>どの方法を選ぶかはケースバイケース &#8211; 適切な手段を選ぶことは必要 &#8211; ハードウェアはすごく早くはならない</li>
</ul>

<h3 id="toc_364">一般的な方法</h3>

<ul>
<li>ボトルネックを見つけてチューニング &#8211; リソースやスロークエリ等の監視 &#8211; プロファイリング &#8212; Devel::NYTProf / Devel::KYTProf &#8212; 計測用のスクリプトを作成しておく &#8212;- Shell::Perl が便利 &#8212; stopwatch で時間計測 &#8212;- benchmark だと CPU 時間を計測する &#8212;- 1 req の処理時間を測って感覚を把握できるようにする</li>
<li>キャッシュや静的生成 &#8211; バックエンドに飛んだら負け &#8212; PSGI でも 数千 req/sec しかさばけない &#8212; Nginx などの静的レスポンスなら 数万 req/sec &#8211; 状況に応じてキャッシュを選択する &#8212; データ量・更新頻度・揮発性 &#8212; データ型サポート &#8212; 複数処理で使いまわすか</li>
<li>コード &#8211; テクニックを抑えておく &#8212; 必要なデータはまとめて引いておく &#8212; 遅延評価 &#8212; MySQL では &#8220;WHERE IN&#8221; / &#8220;BULK UPDATE&#8221; の活用 &#8212; memcached では &#8220;get_multi&#8221; を使ってプロトコルオーバヘッド減らす</li>
</ul>

<h3 id="toc_365">あまり真似されない方法</h3>

<h4 id="toc_366">Bloom Filter</h4>

<ul>
<li>KVS / MySQL への問い合わせ前に大雑把なクエリを間引く &#8211; 精度はデータ量とのトレードオフ &#8211; &lt;a href=&#8221;<a href="http://fallabs.com/blog-ja/promenade.cgi?id=70">http://fallabs.com/blog-ja/promenade.cgi?id=70</a></li>
<li>存在しないキーを大量に問い合わせるケースで有効 &#8211; ブックマークのカウンタ &#8211; ブラウジング履歴調べる &#8211; 富豪的クエリ</li>
<li>memcached への問い合わせなどでネガティブキャッシュを減らせる</li>
<li>使うのは CPU &#8211; パラメータにも依るが 数万 qps 処理できる &#8211; ハッシュよりは遅く、リモートの DB よりは早い</li>
</ul>

<h4 id="toc_367">Cache warmup</h4>

<ul>
<li>よく使われるデータを先に載せておく &#8211; MySQL innodb &#8211; memcached</li>
<li>ユーザがページを表示した瞬間に id を Q4M に入れる &#8211; worker が先回りしてキャッシュに入れる</li>
<li>ライトスルー方式との違い &#8211; 参照されそうなときに乗るのでヒットしやすい &#8211; キャッシュ生成がレスポンス生成より遅いと重くなる</li>
</ul>

<h4 id="toc_368">Varnish + ESI</h4>

<ul>
<li>最近流行りの構成は Nginx + Standalone PSGI でいい</li>
<li>Varnish が使えるポイント &#8211; 高速化 &#8211; vcl で書ける &#8211; ESI が使える &#8212; Akamai が開発した SSI のような仕組み</li>
<li>ESI を使うとパーツごとにキャッシュできる &#8211; 利点 &#8212; フロントとバックエンド間の転送量節約できる &#8211; 問題点 （主に v2） &#8212; Varnish が Contents-Length 返してくれない &#8212; Varnish が ETag みてくれない &#8212; メモリが足りなくなくなると重くなる</li>
</ul>

<hr>

<h2 id="toc_369">新はてなダイアリーの裏側</h2>

<p>はてなの大西 (<a href="http://twitter.com/yasuhiro_onishi">@yasuhiro_onishi</a>) さんの講演。はてなダイアリーが &#8220;Hatena Blog&#8221; にリニューアルを解説するセッションでした。主に表示に関わる仕様変更をユーザの行動に影響しないようにするため、様々な工夫をされているのですね。。</p>

<h3 id="toc_370">技術的な話</h3>

<ul>
<li>外部ドメイン化 / JS フリー化 &#8211; 従来ははてな共通ドメイン・ログインクッキー &#8211; 利点 &#8212; どのサービスでもログイン状態になれる &#8212; 編集 / 閲覧の区別がない &#8211; 欠点 &#8212; XSS 脆弱性に弱いので自由に JS 書けない</li>
<li>クロスドメイン通信 &#8211; ヘッダを iframe 化することでログイン時のメニューを表示</li>
<li>フィードバックシステム &#8211; iframe で表示するヘッダに設置する &#8211; 運営への意見をフィードバックする際に、ユーザがどのページにいるかを一緒に送れる</li>
<li>アクセスコントロール &#8211; ユーザの自由な認証設定に応じていきたい &#8212; 一方で認証の仕組みが複雑になってしまう &#8211; ブログごとに閲覧用 cookie を発行することで対応</li>
<li>はてな記法++ &#8211; ブラケットを [.. から &lt; ..&gt; に変更 &#8212; タグとして解釈可能となり style 属性付与ができたりする</li>
<li>キャッシュ戦略 &#8211; なるべく外側でキャッシュする &#8211; キャッシュに依存しない作りにする &#8211; 基本はページまるごとキャッシュ</li>
</ul>

<hr>

<h2 id="toc_371">Webアプリでパスワード保護はどこまでやればいいか</h2>

<p>「<a href="http://www.amazon.co.jp/%E4%BD%93%E7%B3%BB%E7%9A%84%E3%81%AB%E5%AD%A6%E3%81%B6-%E5%AE%89%E5%85%A8%E3%81%AAWeb%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%8C%E7%94%9F%E3%81%BE%E3%82%8C%E3%82%8B%E5%8E%9F%E7%90%86%E3%81%A8%E5%AF%BE%E7%AD%96%E3%81%AE%E5%AE%9F%E8%B7%B5-%E5%BE%B3%E4%B8%B8-%E6%B5%A9/dp/4797361190">安全なWebアプリケーションの作り方</a>」の著者、徳丸浩 (<a href="http://twitter.com/ockeghem">@ockeghem</a>) さんの講演。同本の 5.1 章を解説する流れで説明されていましたが、RainbowTable などの説明がとてもわかり易かったです。</p>

<h3 id="toc_372">本日のテーマ</h3>

<p><strong>単に HASH 化しただけでは元に戻せるのか？</strong> - クラックは 2 種類 &#8211; オンラインクラック : リモートからのパスワード試行 &#8211; オフラインクラック : 情報を盗み、攻撃者の手元で平文パスワードを求める - パスワードだけ保護する理由とは？ &#8211; パスが漏れてれば他の個人情報も漏れている &#8211; パスワードを使いまわす利用者もいる &#8211; パスワード保護は運営者の義務</p>

<h3 id="toc_373">オンラインクラック</h3>

<ul>
<li>パターン &#8211; 総あたり攻撃 : 時間かかるのであまりやらない &#8211; 辞書攻撃 : 辞書のものを順にパスワードとして試行 &#8211; その他のバリエーション &#8212; ジョーアカウント探索 : ID と pass を同じにしているものを総あたりで試行 &#8212; 逆総当り攻撃 : パスワード固定でユーザを変える &#8212;- 普通の総当りに比べて成功確率高い &#8212;- Twitter のような ユーザ ID がわかっているようなものは特に</li>
<li>対策 &#8211; 強いパスワードを付けてもらう &#8211; アカウントロックが基本 &#8211; ジョーアカウントは登録時にチェック &#8211; 逆総あたり対策として、辞書のものは NG にする</li>
</ul>

<h3 id="toc_374">オフラインクラック</h3>

<ul>
<li>なぜ暗号化ではなくハッシュなの？ &#8211; 暗号化は鍵管理が難しいが、ハッシュは鍵管理が不要</li>
<li>ハッシュは安全？ &#8211; 一般的にはハッシュ値から平文を「復元する」ことはできない &#8211; パスワードの場合は特別な事情がある &#8212; 短い文字列 &#8212; 文字種限られている</li>
<li>ハッシュから平文に戻す方法 &#8211; 総当たり攻撃・辞書攻撃 &#8212; オフライン型のパスワードクラックツール &#8212;- GPU 高速化に伴ってかなり高速にできるようになった &#8211; RainbowTable &#8212; 逆引き表 + 還元関数でチェーンを作る &#8212;- 単純な逆引き表は膨大なデータ量 &#8212;- 圧縮するために還元関数を使う &#8212; チェーンの「先頭」と「末尾」だけ保存すればいい &#8212; 探索はハッシュに還元関数をかけていって「末尾」と一致するかどうかを見ればいい &#8212;- 一致したらその「先頭」がパスワード &#8212; どのアルゴリズムでも実現できる &#8212;- アルゴリズム特有の脆弱性を使っていない &#8211; Salt &#8212; ハッシュの元データに追加する文字列 &#8212;- 見かけのパスワードの長さを長くする &#8212; ユーザごとにソルトを変えることでパスワードが同じでも異なるハッシュ値を得られる &#8211; Streching &#8212; ハッシュの計算を繰り返ことで、ハッシュ計算を遅くする &#8212; メリット／デメリットある</li>
</ul>

<h2 id="toc_375">パスワードの暗号化は本当に無理か</h2>

<ul>
<li>HSM (Hardware Security Module) ならばいける &#8211; 復号化機能を無効にできればよい</li>
</ul>

<hr>

<h2 id="toc_376">Perl で構築された中規模サイトの DC 引っ越し記録</h2>

<p>※講演資料 &lt;a href=&#8221;<a href="http://dl.dropbox.com/u/224433/YAPC2011/index.html">http://dl.dropbox.com/u/224433/YAPC2011/index.html</a> KAYAC の sfujiwara (<a href="http://twitter.com/sfujiwara">@sfujiwara</a>) さんの講演。&#8221;こえ部&#8221; をレンタルサーバから自社インフラに移設した時のまとめを紹介されていました。アップロードデータのあるサービスで新しいファイルを旧環境でケアしてあげる方法は難しそうですが、Nginx の効率のよい使い方などは参考になりました。</p>

<h3 id="toc_377">こえ部 &amp; システム概要</h3>

<ul>
<li>音声投稿共有サイト</li>
<li>機能 &#8211; flash + kamaitachi でブラウザからその場で録音 &#8211; メール添付 &#8211; &#8220;こえ部 Live!&#8221; は Red5 + AnyEvent</li>
<li>ユーザ数 42万</li>
<li>100万 PV/day </li>
<li>UU 20,000 人</li>
<li>Traffic &#8211; Outgoing : Max 70 Mbps &#8211; Inbound : Max 25 Mbps</li>
<li>もともとレンタルサーバを組み合わせてやっていた</li>
<li>サーバ増設 + SPOF整理しながら自社インフラに移設 &#8211; 同時に KVM 環境に移行</li>
</ul>

<h3 id="toc_378">旧システムと新システムのアーキテクチャ</h3>

<ul>
<li>HAProxy &#8211; App サーバの local に HAProxy &#8212; 3306 : MySQL master &#8212; 3307 : MySQL slave &#8212; 同様に KyotoTycoon も設定</li>
<li>今も残っている SPOF &#8211; MySQL master &#8212; MHA を試すとか？ &#8211; NFS</li>
</ul>

<h3 id="toc_379">止めずに移行するための準備と仕掛け</h3>

<ul>
<li>段階的に切り替えたかった</li>
<li>手順 &#8211; 新サーバ群立ち上げ &#8212; 合わせてチューニング &#8212;- mk-duplicate-key-checker &#8212; ファイル書き込みの job は新旧それぞれで別々の worker が処理 &#8212; 旧環境にないファイルは Nginx の error_page を使って内部で reverse proxy &#8211; DC 間に VPN &#8212; OpenVPN で構築 &#8212; 100 Mbps 回線で RTT 3-4 ms / スループット 60Mbps &#8211; データ・トラフィックを VPN 経由で移す &#8211; サービス IP を DNS で切り替え &#8212; サービス停止は 1 時間くらいで</li>
</ul>

<h3 id="toc_380">実際の移行作業顛末</h3>

<ul>
<li>4 日に分けて処理して無事終了</li>
<li>ユーザクレームは作業に関係しない箇所のみ &#8211; ユーザにとってのメンテナンスは「不満だった部分が解消される」という期待になる</li>
</ul>

<hr>

<h2 id="toc_381">Mobage オープンプラットフォームの事件簿</h2>

<p>DeNA の zigorou (<a href="http://twitter.com/zigorou">@zigorou</a>) さんの講演。モバゲーオープンプラットフォームの障害事例とその対処法についてのお話でした。大規模サービスの障害事例はとても参考になります。「原因究明」「失敗防止」「知識配布」という項目でまとめているのもわかりやすかったですし、これらの障害報告会を社内で定期的に行なって共有する体制を作っているのはとても良いことだと思いました。</p>

<h3 id="toc_382">DeadLock 多発事件</h3>

<ul>
<li>ある API が突然 DeadLoak が多発するようになった &#8211; もともと Transaction が比較的長い処理だった</li>
<li>原因究明 &#8211; 特定の UPDATE 文が原因 &#8212; 件数カウントのために TRIGGER で summary 作っていた部分 &#8211; 対象データセットに Group という概念があった &#8212; 特定のデータ群をカテゴライズしていた &#8212; 特定の Group に集中してしまうと DEADLOCK になってしまう</li>
<li>失敗防止 &#8211; Trigger ではなく Queue として扱う &#8212; Queue から 100 件とりだして UPDATE 文つくる</li>
<li>知識配布 &#8211; アプリに人気が偏るとデータが集中する &#8212; 設計やモデリングで予見できた障害かもしれない &#8211; Queue のときは Index 不要なのではらない</li>
</ul>

<h3 id="toc_383">INSERT vs DELETE</h3>

<ul>
<li>ある API の古いデータを消そうとしたが DELETE が INSERT に追いつかない</li>
<li>原因処理 &#8211; PURGE 処理 &#8212; master で全力で DELETE すると slave 遅延する &#8212; よくやるのは DB 負荷にかかわらず一律の weight 入れる &#8211; Loop::Sustainable &#8212; 適切な weight をいれてくれる &#8211; SET SQL_LOG_BIN = 0 &#8211; もっと発想を豊かに &#8212; おかわり作戦 &#8212; 余計なデータを PURGE した新しい系統にいれる</li>
<li>失敗防止 &#8211; 極力速く DELETE できる schema を &#8212; DELETE していくのはほぼ無理 &#8212; 構造考えて PARTITIONING をするべき &#8211; ダメなら消し込んでデータ入れ替え</li>
<li>知識配布 &#8211; おかわり作戦 &#8212; DB 運用すると発生する Flagmentation の対策にも鳴る</li>
</ul>

<h3 id="toc_384">有名人問題</h3>

<ul>
<li>有名人ユーザでレスポンス低下したりする</li>
<li>原因究明 &#8211; 取得件数が異常に多い &#8212; TemporaryTable が作られている</li>
<li>失敗防止 &#8211; SQL_CALC_FOUND_ROWS / TemporaryTable は重い &#8212; ユーザを順次取得してやってみる &#8211; Iterator::GroupedRows</li>
</ul>

<h3 id="toc_385">まとめ</h3>

<ul>
<li>失敗から得られることは大きい</li>
<li>スピンアウトで新しいものできる</li>
<li>分業大事</li>
<li>失敗に対して常に問題</li>
</ul>

<hr>

<h2 id="toc_386">Mobageソーシャルゲームにおける大規模サーバ運用 with Perl</h2>

<p>DeNA の riywo (<a href="http://twitter.com/riywo">@riywo</a>) さんの講演。DeNA の内製 SNG の運営におけるチューニングのお話でした。台数が増えると起きてくる問題や、人気が出てイベントなどでアクセスが集中すると起きる問題など、そのアプローチが参考になりました。DevOps 的な問題点についても、規模は小さいながらも同じような状況を見ている立場としてとても共感できるものでした。</p>

<h3 id="toc_387">Application Tuning</h3>

<ul>
<li>アプリケーション台数は多い &#8211; それぞれからつなぐ先を減らすほうが良い</li>
<li>2 つの接続インターフェイスの改善 &#8211; Resolving Module &#8212; DNS での名前解決で失敗するとサービスに影響が出る &#8212; application が MyDNS の中身をまるごとキャッシュ &#8212;- アプリで dns weight みてバランシング &#8212;- DNS 全滅した場合でもローカルキャッシュでしばらく動く &#8211; Handler Socket &#8212; ユーザデータをキャッシュせず直接 DB に取りに行く &#8212; アプリケーション CPU の負荷が下がり高速化した &#8212;- memcached の consistent hash の計算で意外と使ってた</li>
<li>現在のアプリへの &#8220;追加&#8221; は簡単にできる &#8211; インパクトが大きな箇所のところだけ置き換えればいい &#8211; チューニングしたいところだけピンポイントで入れられる</li>
</ul>

<h3 id="toc_388">Database Tuning</h3>

<ul>
<li>一気に成長することで問題が顕在化</li>
<li>DB 分割を繰り返してきた &#8211; 多くの場合は DB 容量の問題が大きく影響 &#8211; database handle を追加して切り替え &#8212; config で同じところを見続けるようにしておく &#8212; メンテナンスで指し先を切り替える</li>
<li>怪盗ロワイヤルのイベント &#8211; 同じお宝を奪い合うにしてみた &#8211; ユーザを探す所が重くなった &#8212; レベルが近い順に探していくため &#8212; レベルのカラム構造を変えて、ざっくりの level-class をつけるようにした &#8211; Lock wait timeout 発生 &#8211; DeadLock 起きにくくする &#8212; ロックを取得する順番を決める &#8211; イベントをすることで既存機能に影響することがある</li>
</ul>

<h3 id="toc_389">DevOps</h3>

<ul>
<li>イベント開始がシェアされてなかった &#8211; シェアされてても全部の問題が予測できるわけではないけど。。。</li>
<li>それぞれの視点で問題を考えてアプローチする &#8211; Dev &#8211; Ops</li>
<li>ちょっとしたプロジェクトマネジメントとして考えている</li>
</ul>

<hr>

<p>LT もレベルが高く面白い発表ばかりだったのですが、聞くことに専念していたのでメモとってませんでした。。。 そして前夜祭のメモまとめてないことに気づいたのであとでまとめます。</p>

<p>2 日目につづく。</p>
]]></content>
  </entry>
  
</feed>
